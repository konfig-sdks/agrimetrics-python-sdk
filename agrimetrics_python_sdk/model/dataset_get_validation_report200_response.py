# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class DatasetGetValidationReport200Response(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "valid",
            "errorMessages",
        }
        
        class properties:
            valid = schemas.BoolSchema
        
            @staticmethod
            def errorMessages() -> typing.Type['DatasetGetValidationReport200ResponseErrorMessages']:
                return DatasetGetValidationReport200ResponseErrorMessages
            __annotations__ = {
                "valid": valid,
                "errorMessages": errorMessages,
            }
    
    valid: MetaOapg.properties.valid
    errorMessages: 'DatasetGetValidationReport200ResponseErrorMessages'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessages"]) -> 'DatasetGetValidationReport200ResponseErrorMessages': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["valid", "errorMessages", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid"]) -> MetaOapg.properties.valid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessages"]) -> 'DatasetGetValidationReport200ResponseErrorMessages': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["valid", "errorMessages", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        valid: typing.Union[MetaOapg.properties.valid, bool, ],
        errorMessages: 'DatasetGetValidationReport200ResponseErrorMessages',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DatasetGetValidationReport200Response':
        return super().__new__(
            cls,
            *args,
            valid=valid,
            errorMessages=errorMessages,
            _configuration=_configuration,
            **kwargs,
        )

from agrimetrics_python_sdk.model.dataset_get_validation_report200_response_error_messages import DatasetGetValidationReport200ResponseErrorMessages
