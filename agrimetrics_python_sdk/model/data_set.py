# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class DataSet(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "entryType",
            "description",
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def entryType() -> typing.Type['EntryType']:
                return EntryType
        
            @staticmethod
            def tags() -> typing.Type['DataSetTags']:
                return DataSetTags
            
            
            class summary(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 140
            id = schemas.UUIDSchema
        
            @staticmethod
            def exchange() -> typing.Type['Exchange']:
                return Exchange
        
            @staticmethod
            def alternativeTitles() -> typing.Type['DataSetAlternativeTitles']:
                return DataSetAlternativeTitles
            scoringURI = schemas.StrSchema
            endpointKey = schemas.StrSchema
            isOwner = schemas.BoolSchema
            publisher = schemas.StrSchema
            createdAt = schemas.NumberSchema
            published = schemas.NumberSchema
            metadataModified = schemas.NumberSchema
            
            
            class usedBy(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BasicDataSetInfo']:
                        return BasicDataSetInfo
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BasicDataSetInfo'], typing.List['BasicDataSetInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'usedBy':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BasicDataSetInfo':
                    return super().__getitem__(i)
        
            @staticmethod
            def derivedFrom() -> typing.Type['DataSetDerivedFrom']:
                return DataSetDerivedFrom
            
            
            class entitlements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Entitlement']:
                        return Entitlement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Entitlement'], typing.List['Entitlement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entitlements':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Entitlement':
                    return super().__getitem__(i)
        
            @staticmethod
            def entitlementsByIdentity() -> typing.Type['DataSetEntitlementsByIdentity']:
                return DataSetEntitlementsByIdentity
            creator = schemas.StrSchema
            dataReliability = schemas.StrSchema
            license = schemas.StrSchema
        
            @staticmethod
            def licence() -> typing.Type['Licence']:
                return Licence
            landingPage = schemas.StrSchema
            
            
            class resources(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Resource']:
                        return Resource
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Resource'], typing.List['Resource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resources':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Resource':
                    return super().__getitem__(i)
            
            
            class dataFormats(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataFormat']:
                        return DataFormat
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DataFormat'], typing.List['DataFormat']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataFormats':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DataFormat':
                    return super().__getitem__(i)
            pricingDescription = schemas.StrSchema
        
            @staticmethod
            def spatialCoverage() -> typing.Type['SpatialCoverage']:
                return SpatialCoverage
            spatialResolution = schemas.NumberSchema
        
            @staticmethod
            def geospatialExtent() -> typing.Type['GeospatialExtent']:
                return GeospatialExtent
            
            
            class temporalCoverage(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d{4}-[01]\d-[0-3]\d(?:-\d{4}-[01]\d-[0-3]\d)?$',
                    }]
            
            
            class temporalResolution(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "P1Y": "P1Y",
                        "P1M": "P1M",
                        "P1D": "P1D",
                        "PT1H": "PT1H",
                        "PT1M": "PT1M",
                        "PT1S": "PT1S",
                    }
                
                @schemas.classproperty
                def P1Y(cls):
                    return cls("P1Y")
                
                @schemas.classproperty
                def P1M(cls):
                    return cls("P1M")
                
                @schemas.classproperty
                def P1D(cls):
                    return cls("P1D")
                
                @schemas.classproperty
                def PT1H(cls):
                    return cls("PT1H")
                
                @schemas.classproperty
                def PT1M(cls):
                    return cls("PT1M")
                
                @schemas.classproperty
                def PT1S(cls):
                    return cls("PT1S")
        
            @staticmethod
            def accrualPeriodicity() -> typing.Type['AccrualPeriodicity']:
                return AccrualPeriodicity
        
            @staticmethod
            def distributions() -> typing.Type['DataSetDistributions']:
                return DataSetDistributions
            
            
            class issued(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d{4}-[01]\d-[0-3]\d$',
                    }]
            modified = schemas.NumberSchema
        
            @staticmethod
            def keywords() -> typing.Type['DataSetKeywords']:
                return DataSetKeywords
            
            
            class topics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Topic']:
                        return Topic
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Topic'], typing.List['Topic']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'topics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Topic':
                    return super().__getitem__(i)
            
            
            class workflowKeywords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowKeywords']:
                        return WorkflowKeywords
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowKeywords'], typing.List['WorkflowKeywords']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowKeywords':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowKeywords':
                    return super().__getitem__(i)
            
            
            class taxonomyKeywords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TaxonomyKeywords']:
                        return TaxonomyKeywords
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TaxonomyKeywords'], typing.List['TaxonomyKeywords']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taxonomyKeywords':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TaxonomyKeywords':
                    return super().__getitem__(i)
        
            @staticmethod
            def category() -> typing.Type['CategoryValue']:
                return CategoryValue
            
            
            class visibility(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "visible": "VISIBLE",
                        "hidden": "HIDDEN",
                    }
                
                @schemas.classproperty
                def VISIBLE(cls):
                    return cls("visible")
                
                @schemas.classproperty
                def HIDDEN(cls):
                    return cls("hidden")
        
            @staticmethod
            def concepts() -> typing.Type['DataSetConcepts']:
                return DataSetConcepts
        
            @staticmethod
            def dataSet() -> typing.Type['DataSetDataSet']:
                return DataSetDataSet
        
            @staticmethod
            def services() -> typing.Type['DataSetServices']:
                return DataSetServices
        
            @staticmethod
            def sampleData() -> typing.Type['DataSetSampleData']:
                return DataSetSampleData
        
            @staticmethod
            def image() -> typing.Type['ImageRepresentation']:
                return ImageRepresentation
            coordinateReferenceSystemId = schemas.StrSchema
            spatialRepresentationType = schemas.StrSchema
            lineage = schemas.StrSchema
            fromTemplate = schemas.StrSchema
            
            
            class contacts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contacts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
        
            @staticmethod
            def metadataContact() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def publicContact() -> typing.Type['PublicContact']:
                return PublicContact
            approvalForAccessNumber = schemas.NumberSchema
            
            
            class approvalForAccessStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AfA (Information Requests only)": "AF_A_INFORMATION_REQUESTS_ONLY",
                        "AfA (Public Register)": "AF_A_PUBLIC_REGISTER",
                        "AfA (Publication Scheme and Information for Re-Use Register)": "AF_A_PUBLICATION_SCHEME_AND_INFORMATION_FOR_REUSE_REGISTER",
                        "AfA (Publication Scheme)": "AF_A_PUBLICATION_SCHEME",
                        "Not AfA (To be Assessessed with Guidance)": "NOT_AF_A_TO_BE_ASSESSESSED_WITH_GUIDANCE",
                        "Not AfA (To be Assessed)": "NOT_AF_A_TO_BE_ASSESSED",
                        "Not Applicable - Third Party Dataset": "NOT_APPLICABLE__THIRD_PARTY_DATASET",
                        "Open Data Risk Assessment": "OPEN_DATA_RISK_ASSESSMENT",
                    }
                
                @schemas.classproperty
                def AF_A_INFORMATION_REQUESTS_ONLY(cls):
                    return cls("AfA (Information Requests only)")
                
                @schemas.classproperty
                def AF_A_PUBLIC_REGISTER(cls):
                    return cls("AfA (Public Register)")
                
                @schemas.classproperty
                def AF_A_PUBLICATION_SCHEME_AND_INFORMATION_FOR_REUSE_REGISTER(cls):
                    return cls("AfA (Publication Scheme and Information for Re-Use Register)")
                
                @schemas.classproperty
                def AF_A_PUBLICATION_SCHEME(cls):
                    return cls("AfA (Publication Scheme)")
                
                @schemas.classproperty
                def NOT_AF_A_TO_BE_ASSESSESSED_WITH_GUIDANCE(cls):
                    return cls("Not AfA (To be Assessessed with Guidance)")
                
                @schemas.classproperty
                def NOT_AF_A_TO_BE_ASSESSED(cls):
                    return cls("Not AfA (To be Assessed)")
                
                @schemas.classproperty
                def NOT_APPLICABLE__THIRD_PARTY_DATASET(cls):
                    return cls("Not Applicable - Third Party Dataset")
                
                @schemas.classproperty
                def OPEN_DATA_RISK_ASSESSMENT(cls):
                    return cls("Open Data Risk Assessment")
            language = schemas.StrSchema
            characterSet = schemas.StrSchema
            hierarchyLevel = schemas.StrSchema
            metadataLanguage = schemas.StrSchema
            metadataCharacterSet = schemas.StrSchema
            metadataStandardName = schemas.StrSchema
            metadataStandardVersion = schemas.StrSchema
        
            @staticmethod
            def draftStatus() -> typing.Type['DraftStatus']:
                return DraftStatus
            draftNotes = schemas.StrSchema
        
            @staticmethod
            def publishedStatus() -> typing.Type['PublishedStatus']:
                return PublishedStatus
            __annotations__ = {
                "title": title,
                "description": description,
                "entryType": entryType,
                "tags": tags,
                "summary": summary,
                "id": id,
                "exchange": exchange,
                "alternativeTitles": alternativeTitles,
                "scoringURI": scoringURI,
                "endpointKey": endpointKey,
                "isOwner": isOwner,
                "publisher": publisher,
                "createdAt": createdAt,
                "published": published,
                "metadataModified": metadataModified,
                "usedBy": usedBy,
                "derivedFrom": derivedFrom,
                "entitlements": entitlements,
                "entitlementsByIdentity": entitlementsByIdentity,
                "creator": creator,
                "dataReliability": dataReliability,
                "license": license,
                "licence": licence,
                "landingPage": landingPage,
                "resources": resources,
                "dataFormats": dataFormats,
                "pricingDescription": pricingDescription,
                "spatialCoverage": spatialCoverage,
                "spatialResolution": spatialResolution,
                "geospatialExtent": geospatialExtent,
                "temporalCoverage": temporalCoverage,
                "temporalResolution": temporalResolution,
                "accrualPeriodicity": accrualPeriodicity,
                "distributions": distributions,
                "issued": issued,
                "modified": modified,
                "keywords": keywords,
                "topics": topics,
                "workflowKeywords": workflowKeywords,
                "taxonomyKeywords": taxonomyKeywords,
                "category": category,
                "visibility": visibility,
                "concepts": concepts,
                "dataSet": dataSet,
                "services": services,
                "sampleData": sampleData,
                "image": image,
                "coordinateReferenceSystemId": coordinateReferenceSystemId,
                "spatialRepresentationType": spatialRepresentationType,
                "lineage": lineage,
                "fromTemplate": fromTemplate,
                "contacts": contacts,
                "metadataContact": metadataContact,
                "publicContact": publicContact,
                "approvalForAccessNumber": approvalForAccessNumber,
                "approvalForAccessStatus": approvalForAccessStatus,
                "language": language,
                "characterSet": characterSet,
                "hierarchyLevel": hierarchyLevel,
                "metadataLanguage": metadataLanguage,
                "metadataCharacterSet": metadataCharacterSet,
                "metadataStandardName": metadataStandardName,
                "metadataStandardVersion": metadataStandardVersion,
                "draftStatus": draftStatus,
                "draftNotes": draftNotes,
                "publishedStatus": publishedStatus,
            }
    
    entryType: 'EntryType'
    description: MetaOapg.properties.description
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entryType"]) -> 'EntryType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'DataSetTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchange"]) -> 'Exchange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternativeTitles"]) -> 'DataSetAlternativeTitles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoringURI"]) -> MetaOapg.properties.scoringURI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpointKey"]) -> MetaOapg.properties.endpointKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isOwner"]) -> MetaOapg.properties.isOwner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publisher"]) -> MetaOapg.properties.publisher: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published"]) -> MetaOapg.properties.published: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataModified"]) -> MetaOapg.properties.metadataModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usedBy"]) -> MetaOapg.properties.usedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derivedFrom"]) -> 'DataSetDerivedFrom': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entitlements"]) -> MetaOapg.properties.entitlements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entitlementsByIdentity"]) -> 'DataSetEntitlementsByIdentity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataReliability"]) -> MetaOapg.properties.dataReliability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licence"]) -> 'Licence': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["landingPage"]) -> MetaOapg.properties.landingPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resources"]) -> MetaOapg.properties.resources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataFormats"]) -> MetaOapg.properties.dataFormats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricingDescription"]) -> MetaOapg.properties.pricingDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatialCoverage"]) -> 'SpatialCoverage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatialResolution"]) -> MetaOapg.properties.spatialResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geospatialExtent"]) -> 'GeospatialExtent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temporalCoverage"]) -> MetaOapg.properties.temporalCoverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temporalResolution"]) -> MetaOapg.properties.temporalResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualPeriodicity"]) -> 'AccrualPeriodicity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distributions"]) -> 'DataSetDistributions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issued"]) -> MetaOapg.properties.issued: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["keywords"]) -> 'DataSetKeywords': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> MetaOapg.properties.topics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowKeywords"]) -> MetaOapg.properties.workflowKeywords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxonomyKeywords"]) -> MetaOapg.properties.taxonomyKeywords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'CategoryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> MetaOapg.properties.visibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["concepts"]) -> 'DataSetConcepts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSet"]) -> 'DataSetDataSet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["services"]) -> 'DataSetServices': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleData"]) -> 'DataSetSampleData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> 'ImageRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinateReferenceSystemId"]) -> MetaOapg.properties.coordinateReferenceSystemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatialRepresentationType"]) -> MetaOapg.properties.spatialRepresentationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineage"]) -> MetaOapg.properties.lineage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromTemplate"]) -> MetaOapg.properties.fromTemplate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> MetaOapg.properties.contacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataContact"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicContact"]) -> 'PublicContact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalForAccessNumber"]) -> MetaOapg.properties.approvalForAccessNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalForAccessStatus"]) -> MetaOapg.properties.approvalForAccessStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["characterSet"]) -> MetaOapg.properties.characterSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hierarchyLevel"]) -> MetaOapg.properties.hierarchyLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataLanguage"]) -> MetaOapg.properties.metadataLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataCharacterSet"]) -> MetaOapg.properties.metadataCharacterSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataStandardName"]) -> MetaOapg.properties.metadataStandardName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataStandardVersion"]) -> MetaOapg.properties.metadataStandardVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draftStatus"]) -> 'DraftStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draftNotes"]) -> MetaOapg.properties.draftNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishedStatus"]) -> 'PublishedStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "entryType", "tags", "summary", "id", "exchange", "alternativeTitles", "scoringURI", "endpointKey", "isOwner", "publisher", "createdAt", "published", "metadataModified", "usedBy", "derivedFrom", "entitlements", "entitlementsByIdentity", "creator", "dataReliability", "license", "licence", "landingPage", "resources", "dataFormats", "pricingDescription", "spatialCoverage", "spatialResolution", "geospatialExtent", "temporalCoverage", "temporalResolution", "accrualPeriodicity", "distributions", "issued", "modified", "keywords", "topics", "workflowKeywords", "taxonomyKeywords", "category", "visibility", "concepts", "dataSet", "services", "sampleData", "image", "coordinateReferenceSystemId", "spatialRepresentationType", "lineage", "fromTemplate", "contacts", "metadataContact", "publicContact", "approvalForAccessNumber", "approvalForAccessStatus", "language", "characterSet", "hierarchyLevel", "metadataLanguage", "metadataCharacterSet", "metadataStandardName", "metadataStandardVersion", "draftStatus", "draftNotes", "publishedStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entryType"]) -> 'EntryType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['DataSetTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchange"]) -> typing.Union['Exchange', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternativeTitles"]) -> typing.Union['DataSetAlternativeTitles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoringURI"]) -> typing.Union[MetaOapg.properties.scoringURI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpointKey"]) -> typing.Union[MetaOapg.properties.endpointKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isOwner"]) -> typing.Union[MetaOapg.properties.isOwner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publisher"]) -> typing.Union[MetaOapg.properties.publisher, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published"]) -> typing.Union[MetaOapg.properties.published, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataModified"]) -> typing.Union[MetaOapg.properties.metadataModified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usedBy"]) -> typing.Union[MetaOapg.properties.usedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derivedFrom"]) -> typing.Union['DataSetDerivedFrom', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entitlements"]) -> typing.Union[MetaOapg.properties.entitlements, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entitlementsByIdentity"]) -> typing.Union['DataSetEntitlementsByIdentity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> typing.Union[MetaOapg.properties.creator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataReliability"]) -> typing.Union[MetaOapg.properties.dataReliability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licence"]) -> typing.Union['Licence', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["landingPage"]) -> typing.Union[MetaOapg.properties.landingPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union[MetaOapg.properties.resources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataFormats"]) -> typing.Union[MetaOapg.properties.dataFormats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricingDescription"]) -> typing.Union[MetaOapg.properties.pricingDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatialCoverage"]) -> typing.Union['SpatialCoverage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatialResolution"]) -> typing.Union[MetaOapg.properties.spatialResolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geospatialExtent"]) -> typing.Union['GeospatialExtent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temporalCoverage"]) -> typing.Union[MetaOapg.properties.temporalCoverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temporalResolution"]) -> typing.Union[MetaOapg.properties.temporalResolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualPeriodicity"]) -> typing.Union['AccrualPeriodicity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distributions"]) -> typing.Union['DataSetDistributions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issued"]) -> typing.Union[MetaOapg.properties.issued, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> typing.Union[MetaOapg.properties.modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["keywords"]) -> typing.Union['DataSetKeywords', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> typing.Union[MetaOapg.properties.topics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowKeywords"]) -> typing.Union[MetaOapg.properties.workflowKeywords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxonomyKeywords"]) -> typing.Union[MetaOapg.properties.taxonomyKeywords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union['CategoryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union[MetaOapg.properties.visibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["concepts"]) -> typing.Union['DataSetConcepts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSet"]) -> typing.Union['DataSetDataSet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["services"]) -> typing.Union['DataSetServices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleData"]) -> typing.Union['DataSetSampleData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union['ImageRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinateReferenceSystemId"]) -> typing.Union[MetaOapg.properties.coordinateReferenceSystemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatialRepresentationType"]) -> typing.Union[MetaOapg.properties.spatialRepresentationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineage"]) -> typing.Union[MetaOapg.properties.lineage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromTemplate"]) -> typing.Union[MetaOapg.properties.fromTemplate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union[MetaOapg.properties.contacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataContact"]) -> typing.Union['Contact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicContact"]) -> typing.Union['PublicContact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalForAccessNumber"]) -> typing.Union[MetaOapg.properties.approvalForAccessNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalForAccessStatus"]) -> typing.Union[MetaOapg.properties.approvalForAccessStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["characterSet"]) -> typing.Union[MetaOapg.properties.characterSet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hierarchyLevel"]) -> typing.Union[MetaOapg.properties.hierarchyLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataLanguage"]) -> typing.Union[MetaOapg.properties.metadataLanguage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataCharacterSet"]) -> typing.Union[MetaOapg.properties.metadataCharacterSet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataStandardName"]) -> typing.Union[MetaOapg.properties.metadataStandardName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataStandardVersion"]) -> typing.Union[MetaOapg.properties.metadataStandardVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draftStatus"]) -> typing.Union['DraftStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draftNotes"]) -> typing.Union[MetaOapg.properties.draftNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishedStatus"]) -> typing.Union['PublishedStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "entryType", "tags", "summary", "id", "exchange", "alternativeTitles", "scoringURI", "endpointKey", "isOwner", "publisher", "createdAt", "published", "metadataModified", "usedBy", "derivedFrom", "entitlements", "entitlementsByIdentity", "creator", "dataReliability", "license", "licence", "landingPage", "resources", "dataFormats", "pricingDescription", "spatialCoverage", "spatialResolution", "geospatialExtent", "temporalCoverage", "temporalResolution", "accrualPeriodicity", "distributions", "issued", "modified", "keywords", "topics", "workflowKeywords", "taxonomyKeywords", "category", "visibility", "concepts", "dataSet", "services", "sampleData", "image", "coordinateReferenceSystemId", "spatialRepresentationType", "lineage", "fromTemplate", "contacts", "metadataContact", "publicContact", "approvalForAccessNumber", "approvalForAccessStatus", "language", "characterSet", "hierarchyLevel", "metadataLanguage", "metadataCharacterSet", "metadataStandardName", "metadataStandardVersion", "draftStatus", "draftNotes", "publishedStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entryType: 'EntryType',
        description: typing.Union[MetaOapg.properties.description, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        tags: typing.Union['DataSetTags', schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        exchange: typing.Union['Exchange', schemas.Unset] = schemas.unset,
        alternativeTitles: typing.Union['DataSetAlternativeTitles', schemas.Unset] = schemas.unset,
        scoringURI: typing.Union[MetaOapg.properties.scoringURI, str, schemas.Unset] = schemas.unset,
        endpointKey: typing.Union[MetaOapg.properties.endpointKey, str, schemas.Unset] = schemas.unset,
        isOwner: typing.Union[MetaOapg.properties.isOwner, bool, schemas.Unset] = schemas.unset,
        publisher: typing.Union[MetaOapg.properties.publisher, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        published: typing.Union[MetaOapg.properties.published, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        metadataModified: typing.Union[MetaOapg.properties.metadataModified, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        usedBy: typing.Union[MetaOapg.properties.usedBy, list, tuple, schemas.Unset] = schemas.unset,
        derivedFrom: typing.Union['DataSetDerivedFrom', schemas.Unset] = schemas.unset,
        entitlements: typing.Union[MetaOapg.properties.entitlements, list, tuple, schemas.Unset] = schemas.unset,
        entitlementsByIdentity: typing.Union['DataSetEntitlementsByIdentity', schemas.Unset] = schemas.unset,
        creator: typing.Union[MetaOapg.properties.creator, str, schemas.Unset] = schemas.unset,
        dataReliability: typing.Union[MetaOapg.properties.dataReliability, str, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        licence: typing.Union['Licence', schemas.Unset] = schemas.unset,
        landingPage: typing.Union[MetaOapg.properties.landingPage, str, schemas.Unset] = schemas.unset,
        resources: typing.Union[MetaOapg.properties.resources, list, tuple, schemas.Unset] = schemas.unset,
        dataFormats: typing.Union[MetaOapg.properties.dataFormats, list, tuple, schemas.Unset] = schemas.unset,
        pricingDescription: typing.Union[MetaOapg.properties.pricingDescription, str, schemas.Unset] = schemas.unset,
        spatialCoverage: typing.Union['SpatialCoverage', schemas.Unset] = schemas.unset,
        spatialResolution: typing.Union[MetaOapg.properties.spatialResolution, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        geospatialExtent: typing.Union['GeospatialExtent', schemas.Unset] = schemas.unset,
        temporalCoverage: typing.Union[MetaOapg.properties.temporalCoverage, str, schemas.Unset] = schemas.unset,
        temporalResolution: typing.Union[MetaOapg.properties.temporalResolution, str, schemas.Unset] = schemas.unset,
        accrualPeriodicity: typing.Union['AccrualPeriodicity', schemas.Unset] = schemas.unset,
        distributions: typing.Union['DataSetDistributions', schemas.Unset] = schemas.unset,
        issued: typing.Union[MetaOapg.properties.issued, str, schemas.Unset] = schemas.unset,
        modified: typing.Union[MetaOapg.properties.modified, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        keywords: typing.Union['DataSetKeywords', schemas.Unset] = schemas.unset,
        topics: typing.Union[MetaOapg.properties.topics, list, tuple, schemas.Unset] = schemas.unset,
        workflowKeywords: typing.Union[MetaOapg.properties.workflowKeywords, list, tuple, schemas.Unset] = schemas.unset,
        taxonomyKeywords: typing.Union[MetaOapg.properties.taxonomyKeywords, list, tuple, schemas.Unset] = schemas.unset,
        category: typing.Union['CategoryValue', schemas.Unset] = schemas.unset,
        visibility: typing.Union[MetaOapg.properties.visibility, str, schemas.Unset] = schemas.unset,
        concepts: typing.Union['DataSetConcepts', schemas.Unset] = schemas.unset,
        dataSet: typing.Union['DataSetDataSet', schemas.Unset] = schemas.unset,
        services: typing.Union['DataSetServices', schemas.Unset] = schemas.unset,
        sampleData: typing.Union['DataSetSampleData', schemas.Unset] = schemas.unset,
        image: typing.Union['ImageRepresentation', schemas.Unset] = schemas.unset,
        coordinateReferenceSystemId: typing.Union[MetaOapg.properties.coordinateReferenceSystemId, str, schemas.Unset] = schemas.unset,
        spatialRepresentationType: typing.Union[MetaOapg.properties.spatialRepresentationType, str, schemas.Unset] = schemas.unset,
        lineage: typing.Union[MetaOapg.properties.lineage, str, schemas.Unset] = schemas.unset,
        fromTemplate: typing.Union[MetaOapg.properties.fromTemplate, str, schemas.Unset] = schemas.unset,
        contacts: typing.Union[MetaOapg.properties.contacts, list, tuple, schemas.Unset] = schemas.unset,
        metadataContact: typing.Union['Contact', schemas.Unset] = schemas.unset,
        publicContact: typing.Union['PublicContact', schemas.Unset] = schemas.unset,
        approvalForAccessNumber: typing.Union[MetaOapg.properties.approvalForAccessNumber, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        approvalForAccessStatus: typing.Union[MetaOapg.properties.approvalForAccessStatus, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        characterSet: typing.Union[MetaOapg.properties.characterSet, str, schemas.Unset] = schemas.unset,
        hierarchyLevel: typing.Union[MetaOapg.properties.hierarchyLevel, str, schemas.Unset] = schemas.unset,
        metadataLanguage: typing.Union[MetaOapg.properties.metadataLanguage, str, schemas.Unset] = schemas.unset,
        metadataCharacterSet: typing.Union[MetaOapg.properties.metadataCharacterSet, str, schemas.Unset] = schemas.unset,
        metadataStandardName: typing.Union[MetaOapg.properties.metadataStandardName, str, schemas.Unset] = schemas.unset,
        metadataStandardVersion: typing.Union[MetaOapg.properties.metadataStandardVersion, str, schemas.Unset] = schemas.unset,
        draftStatus: typing.Union['DraftStatus', schemas.Unset] = schemas.unset,
        draftNotes: typing.Union[MetaOapg.properties.draftNotes, str, schemas.Unset] = schemas.unset,
        publishedStatus: typing.Union['PublishedStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataSet':
        return super().__new__(
            cls,
            *args,
            entryType=entryType,
            description=description,
            title=title,
            tags=tags,
            summary=summary,
            id=id,
            exchange=exchange,
            alternativeTitles=alternativeTitles,
            scoringURI=scoringURI,
            endpointKey=endpointKey,
            isOwner=isOwner,
            publisher=publisher,
            createdAt=createdAt,
            published=published,
            metadataModified=metadataModified,
            usedBy=usedBy,
            derivedFrom=derivedFrom,
            entitlements=entitlements,
            entitlementsByIdentity=entitlementsByIdentity,
            creator=creator,
            dataReliability=dataReliability,
            license=license,
            licence=licence,
            landingPage=landingPage,
            resources=resources,
            dataFormats=dataFormats,
            pricingDescription=pricingDescription,
            spatialCoverage=spatialCoverage,
            spatialResolution=spatialResolution,
            geospatialExtent=geospatialExtent,
            temporalCoverage=temporalCoverage,
            temporalResolution=temporalResolution,
            accrualPeriodicity=accrualPeriodicity,
            distributions=distributions,
            issued=issued,
            modified=modified,
            keywords=keywords,
            topics=topics,
            workflowKeywords=workflowKeywords,
            taxonomyKeywords=taxonomyKeywords,
            category=category,
            visibility=visibility,
            concepts=concepts,
            dataSet=dataSet,
            services=services,
            sampleData=sampleData,
            image=image,
            coordinateReferenceSystemId=coordinateReferenceSystemId,
            spatialRepresentationType=spatialRepresentationType,
            lineage=lineage,
            fromTemplate=fromTemplate,
            contacts=contacts,
            metadataContact=metadataContact,
            publicContact=publicContact,
            approvalForAccessNumber=approvalForAccessNumber,
            approvalForAccessStatus=approvalForAccessStatus,
            language=language,
            characterSet=characterSet,
            hierarchyLevel=hierarchyLevel,
            metadataLanguage=metadataLanguage,
            metadataCharacterSet=metadataCharacterSet,
            metadataStandardName=metadataStandardName,
            metadataStandardVersion=metadataStandardVersion,
            draftStatus=draftStatus,
            draftNotes=draftNotes,
            publishedStatus=publishedStatus,
            _configuration=_configuration,
            **kwargs,
        )

from agrimetrics_python_sdk.model.accrual_periodicity import AccrualPeriodicity
from agrimetrics_python_sdk.model.basic_data_set_info import BasicDataSetInfo
from agrimetrics_python_sdk.model.category_value import CategoryValue
from agrimetrics_python_sdk.model.contact import Contact
from agrimetrics_python_sdk.model.data_format import DataFormat
from agrimetrics_python_sdk.model.data_set_alternative_titles import DataSetAlternativeTitles
from agrimetrics_python_sdk.model.data_set_concepts import DataSetConcepts
from agrimetrics_python_sdk.model.data_set_data_set import DataSetDataSet
from agrimetrics_python_sdk.model.data_set_derived_from import DataSetDerivedFrom
from agrimetrics_python_sdk.model.data_set_distributions import DataSetDistributions
from agrimetrics_python_sdk.model.data_set_entitlements_by_identity import DataSetEntitlementsByIdentity
from agrimetrics_python_sdk.model.data_set_keywords import DataSetKeywords
from agrimetrics_python_sdk.model.data_set_sample_data import DataSetSampleData
from agrimetrics_python_sdk.model.data_set_services import DataSetServices
from agrimetrics_python_sdk.model.data_set_tags import DataSetTags
from agrimetrics_python_sdk.model.draft_status import DraftStatus
from agrimetrics_python_sdk.model.entitlement import Entitlement
from agrimetrics_python_sdk.model.entry_type import EntryType
from agrimetrics_python_sdk.model.exchange import Exchange
from agrimetrics_python_sdk.model.geospatial_extent import GeospatialExtent
from agrimetrics_python_sdk.model.image_representation import ImageRepresentation
from agrimetrics_python_sdk.model.licence import Licence
from agrimetrics_python_sdk.model.public_contact import PublicContact
from agrimetrics_python_sdk.model.published_status import PublishedStatus
from agrimetrics_python_sdk.model.resource import Resource
from agrimetrics_python_sdk.model.spatial_coverage import SpatialCoverage
from agrimetrics_python_sdk.model.taxonomy_keywords import TaxonomyKeywords
from agrimetrics_python_sdk.model.topic import Topic
from agrimetrics_python_sdk.model.workflow_keywords import WorkflowKeywords
