# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class CostSummary(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "numberOfChargeableItems",
            "totalCost",
        }
        
        class properties:
            totalCost = schemas.NumberSchema
            numberOfChargeableItems = schemas.IntSchema
            totalNumberOfItems = schemas.IntSchema
            __annotations__ = {
                "totalCost": totalCost,
                "numberOfChargeableItems": numberOfChargeableItems,
                "totalNumberOfItems": totalNumberOfItems,
            }
    
    numberOfChargeableItems: MetaOapg.properties.numberOfChargeableItems
    totalCost: MetaOapg.properties.totalCost
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCost"]) -> MetaOapg.properties.totalCost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfChargeableItems"]) -> MetaOapg.properties.numberOfChargeableItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalNumberOfItems"]) -> MetaOapg.properties.totalNumberOfItems: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["totalCost", "numberOfChargeableItems", "totalNumberOfItems", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCost"]) -> MetaOapg.properties.totalCost: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfChargeableItems"]) -> MetaOapg.properties.numberOfChargeableItems: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalNumberOfItems"]) -> typing.Union[MetaOapg.properties.totalNumberOfItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["totalCost", "numberOfChargeableItems", "totalNumberOfItems", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        numberOfChargeableItems: typing.Union[MetaOapg.properties.numberOfChargeableItems, decimal.Decimal, int, ],
        totalCost: typing.Union[MetaOapg.properties.totalCost, decimal.Decimal, int, float, ],
        totalNumberOfItems: typing.Union[MetaOapg.properties.totalNumberOfItems, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CostSummary':
        return super().__new__(
            cls,
            *args,
            numberOfChargeableItems=numberOfChargeableItems,
            totalCost=totalCost,
            totalNumberOfItems=totalNumberOfItems,
            _configuration=_configuration,
            **kwargs,
        )
