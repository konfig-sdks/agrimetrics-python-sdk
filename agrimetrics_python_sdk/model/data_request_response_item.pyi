# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class DataRequestResponseItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "requesterEmail",
            "requestId",
            "datasetName",
            "datasetId",
            "requestedDate",
            "status",
        }
        
        class properties:
            requestId = schemas.UUIDSchema
            datasetId = schemas.UUIDSchema
            datasetName = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
                
                @schemas.classproperty
                def APPROVED(cls):
                    return cls("approved")
                
                @schemas.classproperty
                def DENIED(cls):
                    return cls("denied")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("cancelled")
            requestedDate = schemas.StrSchema
            requesterEmail = schemas.AnyTypeSchema
            __annotations__ = {
                "requestId": requestId,
                "datasetId": datasetId,
                "datasetName": datasetName,
                "status": status,
                "requestedDate": requestedDate,
                "requesterEmail": requesterEmail,
            }
    
    requesterEmail: MetaOapg.properties.requesterEmail
    requestId: MetaOapg.properties.requestId
    datasetName: MetaOapg.properties.datasetName
    datasetId: MetaOapg.properties.datasetId
    requestedDate: MetaOapg.properties.requestedDate
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetName"]) -> MetaOapg.properties.datasetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedDate"]) -> MetaOapg.properties.requestedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requesterEmail"]) -> MetaOapg.properties.requesterEmail: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["requestId", "datasetId", "datasetName", "status", "requestedDate", "requesterEmail", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetName"]) -> MetaOapg.properties.datasetName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedDate"]) -> MetaOapg.properties.requestedDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requesterEmail"]) -> MetaOapg.properties.requesterEmail: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requestId", "datasetId", "datasetName", "status", "requestedDate", "requesterEmail", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        requesterEmail: typing.Union[MetaOapg.properties.requesterEmail, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        requestId: typing.Union[MetaOapg.properties.requestId, str, uuid.UUID, ],
        datasetName: typing.Union[MetaOapg.properties.datasetName, str, ],
        datasetId: typing.Union[MetaOapg.properties.datasetId, str, uuid.UUID, ],
        requestedDate: typing.Union[MetaOapg.properties.requestedDate, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataRequestResponseItem':
        return super().__new__(
            cls,
            *args,
            requesterEmail=requesterEmail,
            requestId=requestId,
            datasetName=datasetName,
            datasetId=datasetId,
            requestedDate=requestedDate,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
