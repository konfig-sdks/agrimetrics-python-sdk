# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class GeospatialExtent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "northBoundLatitude",
            "southBoundLatitude",
            "eastBoundLongitude",
            "westBoundLongitude",
        }
        
        class properties:
            northBoundLatitude = schemas.NumberSchema
            eastBoundLongitude = schemas.NumberSchema
            southBoundLatitude = schemas.NumberSchema
            westBoundLongitude = schemas.NumberSchema
            __annotations__ = {
                "northBoundLatitude": northBoundLatitude,
                "eastBoundLongitude": eastBoundLongitude,
                "southBoundLatitude": southBoundLatitude,
                "westBoundLongitude": westBoundLongitude,
            }
    
    northBoundLatitude: MetaOapg.properties.northBoundLatitude
    southBoundLatitude: MetaOapg.properties.southBoundLatitude
    eastBoundLongitude: MetaOapg.properties.eastBoundLongitude
    westBoundLongitude: MetaOapg.properties.westBoundLongitude
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["northBoundLatitude"]) -> MetaOapg.properties.northBoundLatitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eastBoundLongitude"]) -> MetaOapg.properties.eastBoundLongitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["southBoundLatitude"]) -> MetaOapg.properties.southBoundLatitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["westBoundLongitude"]) -> MetaOapg.properties.westBoundLongitude: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["northBoundLatitude", "eastBoundLongitude", "southBoundLatitude", "westBoundLongitude", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["northBoundLatitude"]) -> MetaOapg.properties.northBoundLatitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eastBoundLongitude"]) -> MetaOapg.properties.eastBoundLongitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["southBoundLatitude"]) -> MetaOapg.properties.southBoundLatitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["westBoundLongitude"]) -> MetaOapg.properties.westBoundLongitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["northBoundLatitude", "eastBoundLongitude", "southBoundLatitude", "westBoundLongitude", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        northBoundLatitude: typing.Union[MetaOapg.properties.northBoundLatitude, decimal.Decimal, int, float, ],
        southBoundLatitude: typing.Union[MetaOapg.properties.southBoundLatitude, decimal.Decimal, int, float, ],
        eastBoundLongitude: typing.Union[MetaOapg.properties.eastBoundLongitude, decimal.Decimal, int, float, ],
        westBoundLongitude: typing.Union[MetaOapg.properties.westBoundLongitude, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GeospatialExtent':
        return super().__new__(
            cls,
            *args,
            northBoundLatitude=northBoundLatitude,
            southBoundLatitude=southBoundLatitude,
            eastBoundLongitude=eastBoundLongitude,
            westBoundLongitude=westBoundLongitude,
            _configuration=_configuration,
            **kwargs,
        )
