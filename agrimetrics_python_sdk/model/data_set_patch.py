# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class DataSetPatch(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['DataSetPatchTags']:
                return DataSetPatchTags
            
            
            class summary(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 140
            title = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def alternativeTitles() -> typing.Type['DataSetPatchAlternativeTitles']:
                return DataSetPatchAlternativeTitles
            scoringURI = schemas.StrSchema
            endpointKey = schemas.StrSchema
        
            @staticmethod
            def derivedFrom() -> typing.Type['DataSetPatchDerivedFrom']:
                return DataSetPatchDerivedFrom
            
            
            class creator(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creator':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dataReliability(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataReliability':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class license(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'license':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def licence() -> typing.Type['DataSetPatchLicence']:
                return DataSetPatchLicence
            
            
            class resources(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Resource']:
                        return Resource
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resources':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dataFormats(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DataFormat']:
                        return DataFormat
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dataFormats':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class spatialCoverage(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "United Kingdom": "UNITED_KINGDOM",
                        "England": "ENGLAND",
                        "Northern Ireland": "NORTHERN_IRELAND",
                        "Scotland": "SCOTLAND",
                        "Wales": "WALES",
                        "Canada": "CANADA",
                        "Ethiopia": "ETHIOPIA",
                        "France": "FRANCE",
                        "India": "INDIA",
                        "Kenya": "KENYA",
                        "Mexico": "MEXICO",
                        "Netherlands": "NETHERLANDS",
                        "Spain": "SPAIN",
                        "Tanzania": "TANZANIA",
                        "Uganda": "UGANDA",
                        "United States": "UNITED_STATES",
                        "Global only": "GLOBAL_ONLY",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def UNITED_KINGDOM(cls):
                    return cls("United Kingdom")
                
                @schemas.classproperty
                def ENGLAND(cls):
                    return cls("England")
                
                @schemas.classproperty
                def NORTHERN_IRELAND(cls):
                    return cls("Northern Ireland")
                
                @schemas.classproperty
                def SCOTLAND(cls):
                    return cls("Scotland")
                
                @schemas.classproperty
                def WALES(cls):
                    return cls("Wales")
                
                @schemas.classproperty
                def CANADA(cls):
                    return cls("Canada")
                
                @schemas.classproperty
                def ETHIOPIA(cls):
                    return cls("Ethiopia")
                
                @schemas.classproperty
                def FRANCE(cls):
                    return cls("France")
                
                @schemas.classproperty
                def INDIA(cls):
                    return cls("India")
                
                @schemas.classproperty
                def KENYA(cls):
                    return cls("Kenya")
                
                @schemas.classproperty
                def MEXICO(cls):
                    return cls("Mexico")
                
                @schemas.classproperty
                def NETHERLANDS(cls):
                    return cls("Netherlands")
                
                @schemas.classproperty
                def SPAIN(cls):
                    return cls("Spain")
                
                @schemas.classproperty
                def TANZANIA(cls):
                    return cls("Tanzania")
                
                @schemas.classproperty
                def UGANDA(cls):
                    return cls("Uganda")
                
                @schemas.classproperty
                def UNITED_STATES(cls):
                    return cls("United States")
                
                @schemas.classproperty
                def GLOBAL_ONLY(cls):
                    return cls("Global only")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'spatialCoverage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class spatialResolution(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'spatialResolution':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def geospatialExtent() -> typing.Type['DataSetPatchGeospatialExtent']:
                return DataSetPatchGeospatialExtent
            
            
            class temporalCoverage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d{4}-[01]\d-[0-3]\d(?:-\d{4}-[01]\d-[0-3]\d)?$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'temporalCoverage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def temporalExtent() -> typing.Type['DataSetPatchTemporalExtent']:
                return DataSetPatchTemporalExtent
            
            
            class temporalResolution(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "P1Y": "P1Y",
                        "P1M": "P1M",
                        "P1D": "P1D",
                        "PT1H": "PT1H",
                        "PT1M": "PT1M",
                        "PT1S": "PT1S",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def P1Y(cls):
                    return cls("P1Y")
                
                @schemas.classproperty
                def P1M(cls):
                    return cls("P1M")
                
                @schemas.classproperty
                def P1D(cls):
                    return cls("P1D")
                
                @schemas.classproperty
                def PT1H(cls):
                    return cls("PT1H")
                
                @schemas.classproperty
                def PT1M(cls):
                    return cls("PT1M")
                
                @schemas.classproperty
                def PT1S(cls):
                    return cls("PT1S")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'temporalResolution':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class topics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Topic']:
                        return Topic
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Topic'], typing.List['Topic']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'topics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Topic':
                    return super().__getitem__(i)
            
            
            class workflowKeywords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WorkflowKeywords']:
                        return WorkflowKeywords
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WorkflowKeywords'], typing.List['WorkflowKeywords']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowKeywords':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WorkflowKeywords':
                    return super().__getitem__(i)
            
            
            class taxonomyKeywords(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TaxonomyKeywords']:
                        return TaxonomyKeywords
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TaxonomyKeywords'], typing.List['TaxonomyKeywords']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'taxonomyKeywords':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TaxonomyKeywords':
                    return super().__getitem__(i)
            
            
            class accrualPeriodicity(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Hourly": "HOURLY",
                        "Daily": "DAILY",
                        "Three times a week": "THREE_TIMES_A_WEEK",
                        "Semiweekly": "SEMIWEEKLY",
                        "Weekly": "WEEKLY",
                        "Three times a month": "THREE_TIMES_A_MONTH",
                        "Biweekly": "BIWEEKLY",
                        "Semimonthly": "SEMIMONTHLY",
                        "Monthly": "MONTHLY",
                        "Bimonthly": "BIMONTHLY",
                        "Quarterly": "QUARTERLY",
                        "Three times a year": "THREE_TIMES_A_YEAR",
                        "Semiannual": "SEMIANNUAL",
                        "Annual": "ANNUAL",
                        "Biennial": "BIENNIAL",
                        "Triennial": "TRIENNIAL",
                        "Continuous": "CONTINUOUS",
                        "Irregular": "IRREGULAR",
                        "continual": "CONTINUAL",
                        "daily": "DAILY",
                        "weekly": "WEEKLY",
                        "fortnightly": "FORTNIGHTLY",
                        "monthly": "MONTHLY",
                        "quarterly": "QUARTERLY",
                        "biannually": "BIANNUALLY",
                        "annually": "ANNUALLY",
                        "asNeeded": "AS_NEEDED",
                        "irregular": "IRREGULAR",
                        "notPlanned": "NOT_PLANNED",
                        "unknown": "UNKNOWN",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def HOURLY(cls):
                    return cls("Hourly")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("Daily")
                
                @schemas.classproperty
                def THREE_TIMES_A_WEEK(cls):
                    return cls("Three times a week")
                
                @schemas.classproperty
                def SEMIWEEKLY(cls):
                    return cls("Semiweekly")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("Weekly")
                
                @schemas.classproperty
                def THREE_TIMES_A_MONTH(cls):
                    return cls("Three times a month")
                
                @schemas.classproperty
                def BIWEEKLY(cls):
                    return cls("Biweekly")
                
                @schemas.classproperty
                def SEMIMONTHLY(cls):
                    return cls("Semimonthly")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def BIMONTHLY(cls):
                    return cls("Bimonthly")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def THREE_TIMES_A_YEAR(cls):
                    return cls("Three times a year")
                
                @schemas.classproperty
                def SEMIANNUAL(cls):
                    return cls("Semiannual")
                
                @schemas.classproperty
                def ANNUAL(cls):
                    return cls("Annual")
                
                @schemas.classproperty
                def BIENNIAL(cls):
                    return cls("Biennial")
                
                @schemas.classproperty
                def TRIENNIAL(cls):
                    return cls("Triennial")
                
                @schemas.classproperty
                def CONTINUOUS(cls):
                    return cls("Continuous")
                
                @schemas.classproperty
                def IRREGULAR(cls):
                    return cls("Irregular")
                
                @schemas.classproperty
                def CONTINUAL(cls):
                    return cls("continual")
                
                @schemas.classproperty
                def DAILY(cls):
                    return cls("daily")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("weekly")
                
                @schemas.classproperty
                def FORTNIGHTLY(cls):
                    return cls("fortnightly")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("monthly")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("quarterly")
                
                @schemas.classproperty
                def BIANNUALLY(cls):
                    return cls("biannually")
                
                @schemas.classproperty
                def ANNUALLY(cls):
                    return cls("annually")
                
                @schemas.classproperty
                def AS_NEEDED(cls):
                    return cls("asNeeded")
                
                @schemas.classproperty
                def IRREGULAR(cls):
                    return cls("irregular")
                
                @schemas.classproperty
                def NOT_PLANNED(cls):
                    return cls("notPlanned")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("unknown")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accrualPeriodicity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class issued(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d{4}-[01]\d-[0-3]\d$',
                    }]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'issued':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class createdAt(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'createdAt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class published(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'published':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def publishedStatus() -> typing.Type['PublishedStatus']:
                return PublishedStatus
            
            
            class modified(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modified':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def category() -> typing.Type['CategoryValue']:
                return CategoryValue
            
            
            class visibility(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "visible": "VISIBLE",
                        "hidden": "HIDDEN",
                    }
                
                @schemas.classproperty
                def VISIBLE(cls):
                    return cls("visible")
                
                @schemas.classproperty
                def HIDDEN(cls):
                    return cls("hidden")
            pricingDescription = schemas.StrSchema
        
            @staticmethod
            def distributions() -> typing.Type['DataSetPatchDistributions']:
                return DataSetPatchDistributions
            
            
            class approvalForAccessNumber(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvalForAccessNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class approvalForAccessStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AfA (Information Requests only)": "AF_A_INFORMATION_REQUESTS_ONLY",
                        "AfA (Public Register)": "AF_A_PUBLIC_REGISTER",
                        "AfA (Publication Scheme and Information for Re-Use Register)": "AF_A_PUBLICATION_SCHEME_AND_INFORMATION_FOR_REUSE_REGISTER",
                        "AfA (Publication Scheme)": "AF_A_PUBLICATION_SCHEME",
                        "Not AfA (To be Assessessed with Guidance)": "NOT_AF_A_TO_BE_ASSESSESSED_WITH_GUIDANCE",
                        "Not AfA (To be Assessed)": "NOT_AF_A_TO_BE_ASSESSED",
                        "Not Applicable - Third Party Dataset": "NOT_APPLICABLE__THIRD_PARTY_DATASET",
                        "Open Data Risk Assessment": "OPEN_DATA_RISK_ASSESSMENT",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def AF_A_INFORMATION_REQUESTS_ONLY(cls):
                    return cls("AfA (Information Requests only)")
                
                @schemas.classproperty
                def AF_A_PUBLIC_REGISTER(cls):
                    return cls("AfA (Public Register)")
                
                @schemas.classproperty
                def AF_A_PUBLICATION_SCHEME_AND_INFORMATION_FOR_REUSE_REGISTER(cls):
                    return cls("AfA (Publication Scheme and Information for Re-Use Register)")
                
                @schemas.classproperty
                def AF_A_PUBLICATION_SCHEME(cls):
                    return cls("AfA (Publication Scheme)")
                
                @schemas.classproperty
                def NOT_AF_A_TO_BE_ASSESSESSED_WITH_GUIDANCE(cls):
                    return cls("Not AfA (To be Assessessed with Guidance)")
                
                @schemas.classproperty
                def NOT_AF_A_TO_BE_ASSESSED(cls):
                    return cls("Not AfA (To be Assessed)")
                
                @schemas.classproperty
                def NOT_APPLICABLE__THIRD_PARTY_DATASET(cls):
                    return cls("Not Applicable - Third Party Dataset")
                
                @schemas.classproperty
                def OPEN_DATA_RISK_ASSESSMENT(cls):
                    return cls("Open Data Risk Assessment")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'approvalForAccessStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class contacts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contacts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
        
            @staticmethod
            def metadataContact() -> typing.Type['DataSetPatchMetadataContact']:
                return DataSetPatchMetadataContact
            
            
            class lineage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lineage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class language(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'language':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class characterSet(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'characterSet':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hierarchyLevel(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hierarchyLevel':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class metadataLanguage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metadataLanguage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class metadataCharacterSet(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metadataCharacterSet':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class metadataStandardName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metadataStandardName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class metadataStandardVersion(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metadataStandardVersion':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class coordinateReferenceSystemId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'coordinateReferenceSystemId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class spatialRepresentationType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'spatialRepresentationType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "tags": tags,
                "summary": summary,
                "title": title,
                "description": description,
                "alternativeTitles": alternativeTitles,
                "scoringURI": scoringURI,
                "endpointKey": endpointKey,
                "derivedFrom": derivedFrom,
                "creator": creator,
                "dataReliability": dataReliability,
                "license": license,
                "licence": licence,
                "resources": resources,
                "dataFormats": dataFormats,
                "spatialCoverage": spatialCoverage,
                "spatialResolution": spatialResolution,
                "geospatialExtent": geospatialExtent,
                "temporalCoverage": temporalCoverage,
                "temporalExtent": temporalExtent,
                "temporalResolution": temporalResolution,
                "topics": topics,
                "workflowKeywords": workflowKeywords,
                "taxonomyKeywords": taxonomyKeywords,
                "accrualPeriodicity": accrualPeriodicity,
                "issued": issued,
                "createdAt": createdAt,
                "published": published,
                "publishedStatus": publishedStatus,
                "modified": modified,
                "category": category,
                "visibility": visibility,
                "pricingDescription": pricingDescription,
                "distributions": distributions,
                "approvalForAccessNumber": approvalForAccessNumber,
                "approvalForAccessStatus": approvalForAccessStatus,
                "contacts": contacts,
                "metadataContact": metadataContact,
                "lineage": lineage,
                "language": language,
                "characterSet": characterSet,
                "hierarchyLevel": hierarchyLevel,
                "metadataLanguage": metadataLanguage,
                "metadataCharacterSet": metadataCharacterSet,
                "metadataStandardName": metadataStandardName,
                "metadataStandardVersion": metadataStandardVersion,
                "coordinateReferenceSystemId": coordinateReferenceSystemId,
                "spatialRepresentationType": spatialRepresentationType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'DataSetPatchTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alternativeTitles"]) -> 'DataSetPatchAlternativeTitles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoringURI"]) -> MetaOapg.properties.scoringURI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpointKey"]) -> MetaOapg.properties.endpointKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["derivedFrom"]) -> 'DataSetPatchDerivedFrom': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataReliability"]) -> MetaOapg.properties.dataReliability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licence"]) -> 'DataSetPatchLicence': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resources"]) -> MetaOapg.properties.resources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataFormats"]) -> MetaOapg.properties.dataFormats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatialCoverage"]) -> MetaOapg.properties.spatialCoverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatialResolution"]) -> MetaOapg.properties.spatialResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geospatialExtent"]) -> 'DataSetPatchGeospatialExtent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temporalCoverage"]) -> MetaOapg.properties.temporalCoverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temporalExtent"]) -> 'DataSetPatchTemporalExtent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temporalResolution"]) -> MetaOapg.properties.temporalResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics"]) -> MetaOapg.properties.topics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowKeywords"]) -> MetaOapg.properties.workflowKeywords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxonomyKeywords"]) -> MetaOapg.properties.taxonomyKeywords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualPeriodicity"]) -> MetaOapg.properties.accrualPeriodicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issued"]) -> MetaOapg.properties.issued: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published"]) -> MetaOapg.properties.published: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishedStatus"]) -> 'PublishedStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'CategoryValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> MetaOapg.properties.visibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricingDescription"]) -> MetaOapg.properties.pricingDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distributions"]) -> 'DataSetPatchDistributions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalForAccessNumber"]) -> MetaOapg.properties.approvalForAccessNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalForAccessStatus"]) -> MetaOapg.properties.approvalForAccessStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> MetaOapg.properties.contacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataContact"]) -> 'DataSetPatchMetadataContact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lineage"]) -> MetaOapg.properties.lineage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["characterSet"]) -> MetaOapg.properties.characterSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hierarchyLevel"]) -> MetaOapg.properties.hierarchyLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataLanguage"]) -> MetaOapg.properties.metadataLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataCharacterSet"]) -> MetaOapg.properties.metadataCharacterSet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataStandardName"]) -> MetaOapg.properties.metadataStandardName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataStandardVersion"]) -> MetaOapg.properties.metadataStandardVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinateReferenceSystemId"]) -> MetaOapg.properties.coordinateReferenceSystemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatialRepresentationType"]) -> MetaOapg.properties.spatialRepresentationType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "summary", "title", "description", "alternativeTitles", "scoringURI", "endpointKey", "derivedFrom", "creator", "dataReliability", "license", "licence", "resources", "dataFormats", "spatialCoverage", "spatialResolution", "geospatialExtent", "temporalCoverage", "temporalExtent", "temporalResolution", "topics", "workflowKeywords", "taxonomyKeywords", "accrualPeriodicity", "issued", "createdAt", "published", "publishedStatus", "modified", "category", "visibility", "pricingDescription", "distributions", "approvalForAccessNumber", "approvalForAccessStatus", "contacts", "metadataContact", "lineage", "language", "characterSet", "hierarchyLevel", "metadataLanguage", "metadataCharacterSet", "metadataStandardName", "metadataStandardVersion", "coordinateReferenceSystemId", "spatialRepresentationType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['DataSetPatchTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alternativeTitles"]) -> typing.Union['DataSetPatchAlternativeTitles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoringURI"]) -> typing.Union[MetaOapg.properties.scoringURI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpointKey"]) -> typing.Union[MetaOapg.properties.endpointKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["derivedFrom"]) -> typing.Union['DataSetPatchDerivedFrom', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> typing.Union[MetaOapg.properties.creator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataReliability"]) -> typing.Union[MetaOapg.properties.dataReliability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licence"]) -> typing.Union['DataSetPatchLicence', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union[MetaOapg.properties.resources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataFormats"]) -> typing.Union[MetaOapg.properties.dataFormats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatialCoverage"]) -> typing.Union[MetaOapg.properties.spatialCoverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatialResolution"]) -> typing.Union[MetaOapg.properties.spatialResolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geospatialExtent"]) -> typing.Union['DataSetPatchGeospatialExtent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temporalCoverage"]) -> typing.Union[MetaOapg.properties.temporalCoverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temporalExtent"]) -> typing.Union['DataSetPatchTemporalExtent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temporalResolution"]) -> typing.Union[MetaOapg.properties.temporalResolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> typing.Union[MetaOapg.properties.topics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowKeywords"]) -> typing.Union[MetaOapg.properties.workflowKeywords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxonomyKeywords"]) -> typing.Union[MetaOapg.properties.taxonomyKeywords, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualPeriodicity"]) -> typing.Union[MetaOapg.properties.accrualPeriodicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issued"]) -> typing.Union[MetaOapg.properties.issued, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published"]) -> typing.Union[MetaOapg.properties.published, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishedStatus"]) -> typing.Union['PublishedStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> typing.Union[MetaOapg.properties.modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union['CategoryValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union[MetaOapg.properties.visibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricingDescription"]) -> typing.Union[MetaOapg.properties.pricingDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distributions"]) -> typing.Union['DataSetPatchDistributions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalForAccessNumber"]) -> typing.Union[MetaOapg.properties.approvalForAccessNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalForAccessStatus"]) -> typing.Union[MetaOapg.properties.approvalForAccessStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union[MetaOapg.properties.contacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataContact"]) -> typing.Union['DataSetPatchMetadataContact', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lineage"]) -> typing.Union[MetaOapg.properties.lineage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["characterSet"]) -> typing.Union[MetaOapg.properties.characterSet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hierarchyLevel"]) -> typing.Union[MetaOapg.properties.hierarchyLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataLanguage"]) -> typing.Union[MetaOapg.properties.metadataLanguage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataCharacterSet"]) -> typing.Union[MetaOapg.properties.metadataCharacterSet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataStandardName"]) -> typing.Union[MetaOapg.properties.metadataStandardName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataStandardVersion"]) -> typing.Union[MetaOapg.properties.metadataStandardVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinateReferenceSystemId"]) -> typing.Union[MetaOapg.properties.coordinateReferenceSystemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatialRepresentationType"]) -> typing.Union[MetaOapg.properties.spatialRepresentationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "summary", "title", "description", "alternativeTitles", "scoringURI", "endpointKey", "derivedFrom", "creator", "dataReliability", "license", "licence", "resources", "dataFormats", "spatialCoverage", "spatialResolution", "geospatialExtent", "temporalCoverage", "temporalExtent", "temporalResolution", "topics", "workflowKeywords", "taxonomyKeywords", "accrualPeriodicity", "issued", "createdAt", "published", "publishedStatus", "modified", "category", "visibility", "pricingDescription", "distributions", "approvalForAccessNumber", "approvalForAccessStatus", "contacts", "metadataContact", "lineage", "language", "characterSet", "hierarchyLevel", "metadataLanguage", "metadataCharacterSet", "metadataStandardName", "metadataStandardVersion", "coordinateReferenceSystemId", "spatialRepresentationType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['DataSetPatchTags', schemas.Unset] = schemas.unset,
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        alternativeTitles: typing.Union['DataSetPatchAlternativeTitles', schemas.Unset] = schemas.unset,
        scoringURI: typing.Union[MetaOapg.properties.scoringURI, str, schemas.Unset] = schemas.unset,
        endpointKey: typing.Union[MetaOapg.properties.endpointKey, str, schemas.Unset] = schemas.unset,
        derivedFrom: typing.Union['DataSetPatchDerivedFrom', schemas.Unset] = schemas.unset,
        creator: typing.Union[MetaOapg.properties.creator, None, str, schemas.Unset] = schemas.unset,
        dataReliability: typing.Union[MetaOapg.properties.dataReliability, None, str, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, None, str, schemas.Unset] = schemas.unset,
        licence: typing.Union['DataSetPatchLicence', schemas.Unset] = schemas.unset,
        resources: typing.Union[MetaOapg.properties.resources, list, tuple, None, schemas.Unset] = schemas.unset,
        dataFormats: typing.Union[MetaOapg.properties.dataFormats, list, tuple, None, schemas.Unset] = schemas.unset,
        spatialCoverage: typing.Union[MetaOapg.properties.spatialCoverage, None, str, schemas.Unset] = schemas.unset,
        spatialResolution: typing.Union[MetaOapg.properties.spatialResolution, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        geospatialExtent: typing.Union['DataSetPatchGeospatialExtent', schemas.Unset] = schemas.unset,
        temporalCoverage: typing.Union[MetaOapg.properties.temporalCoverage, None, str, schemas.Unset] = schemas.unset,
        temporalExtent: typing.Union['DataSetPatchTemporalExtent', schemas.Unset] = schemas.unset,
        temporalResolution: typing.Union[MetaOapg.properties.temporalResolution, None, str, schemas.Unset] = schemas.unset,
        topics: typing.Union[MetaOapg.properties.topics, list, tuple, schemas.Unset] = schemas.unset,
        workflowKeywords: typing.Union[MetaOapg.properties.workflowKeywords, list, tuple, schemas.Unset] = schemas.unset,
        taxonomyKeywords: typing.Union[MetaOapg.properties.taxonomyKeywords, list, tuple, schemas.Unset] = schemas.unset,
        accrualPeriodicity: typing.Union[MetaOapg.properties.accrualPeriodicity, None, str, schemas.Unset] = schemas.unset,
        issued: typing.Union[MetaOapg.properties.issued, None, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        published: typing.Union[MetaOapg.properties.published, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        publishedStatus: typing.Union['PublishedStatus', schemas.Unset] = schemas.unset,
        modified: typing.Union[MetaOapg.properties.modified, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        category: typing.Union['CategoryValue', schemas.Unset] = schemas.unset,
        visibility: typing.Union[MetaOapg.properties.visibility, str, schemas.Unset] = schemas.unset,
        pricingDescription: typing.Union[MetaOapg.properties.pricingDescription, str, schemas.Unset] = schemas.unset,
        distributions: typing.Union['DataSetPatchDistributions', schemas.Unset] = schemas.unset,
        approvalForAccessNumber: typing.Union[MetaOapg.properties.approvalForAccessNumber, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        approvalForAccessStatus: typing.Union[MetaOapg.properties.approvalForAccessStatus, None, str, schemas.Unset] = schemas.unset,
        contacts: typing.Union[MetaOapg.properties.contacts, list, tuple, schemas.Unset] = schemas.unset,
        metadataContact: typing.Union['DataSetPatchMetadataContact', schemas.Unset] = schemas.unset,
        lineage: typing.Union[MetaOapg.properties.lineage, None, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, None, str, schemas.Unset] = schemas.unset,
        characterSet: typing.Union[MetaOapg.properties.characterSet, None, str, schemas.Unset] = schemas.unset,
        hierarchyLevel: typing.Union[MetaOapg.properties.hierarchyLevel, None, str, schemas.Unset] = schemas.unset,
        metadataLanguage: typing.Union[MetaOapg.properties.metadataLanguage, None, str, schemas.Unset] = schemas.unset,
        metadataCharacterSet: typing.Union[MetaOapg.properties.metadataCharacterSet, None, str, schemas.Unset] = schemas.unset,
        metadataStandardName: typing.Union[MetaOapg.properties.metadataStandardName, None, str, schemas.Unset] = schemas.unset,
        metadataStandardVersion: typing.Union[MetaOapg.properties.metadataStandardVersion, None, str, schemas.Unset] = schemas.unset,
        coordinateReferenceSystemId: typing.Union[MetaOapg.properties.coordinateReferenceSystemId, None, str, schemas.Unset] = schemas.unset,
        spatialRepresentationType: typing.Union[MetaOapg.properties.spatialRepresentationType, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataSetPatch':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            summary=summary,
            title=title,
            description=description,
            alternativeTitles=alternativeTitles,
            scoringURI=scoringURI,
            endpointKey=endpointKey,
            derivedFrom=derivedFrom,
            creator=creator,
            dataReliability=dataReliability,
            license=license,
            licence=licence,
            resources=resources,
            dataFormats=dataFormats,
            spatialCoverage=spatialCoverage,
            spatialResolution=spatialResolution,
            geospatialExtent=geospatialExtent,
            temporalCoverage=temporalCoverage,
            temporalExtent=temporalExtent,
            temporalResolution=temporalResolution,
            topics=topics,
            workflowKeywords=workflowKeywords,
            taxonomyKeywords=taxonomyKeywords,
            accrualPeriodicity=accrualPeriodicity,
            issued=issued,
            createdAt=createdAt,
            published=published,
            publishedStatus=publishedStatus,
            modified=modified,
            category=category,
            visibility=visibility,
            pricingDescription=pricingDescription,
            distributions=distributions,
            approvalForAccessNumber=approvalForAccessNumber,
            approvalForAccessStatus=approvalForAccessStatus,
            contacts=contacts,
            metadataContact=metadataContact,
            lineage=lineage,
            language=language,
            characterSet=characterSet,
            hierarchyLevel=hierarchyLevel,
            metadataLanguage=metadataLanguage,
            metadataCharacterSet=metadataCharacterSet,
            metadataStandardName=metadataStandardName,
            metadataStandardVersion=metadataStandardVersion,
            coordinateReferenceSystemId=coordinateReferenceSystemId,
            spatialRepresentationType=spatialRepresentationType,
            _configuration=_configuration,
            **kwargs,
        )

from agrimetrics_python_sdk.model.category_value import CategoryValue
from agrimetrics_python_sdk.model.contact import Contact
from agrimetrics_python_sdk.model.data_format import DataFormat
from agrimetrics_python_sdk.model.data_set_patch_alternative_titles import DataSetPatchAlternativeTitles
from agrimetrics_python_sdk.model.data_set_patch_derived_from import DataSetPatchDerivedFrom
from agrimetrics_python_sdk.model.data_set_patch_distributions import DataSetPatchDistributions
from agrimetrics_python_sdk.model.data_set_patch_geospatial_extent import DataSetPatchGeospatialExtent
from agrimetrics_python_sdk.model.data_set_patch_licence import DataSetPatchLicence
from agrimetrics_python_sdk.model.data_set_patch_metadata_contact import DataSetPatchMetadataContact
from agrimetrics_python_sdk.model.data_set_patch_tags import DataSetPatchTags
from agrimetrics_python_sdk.model.data_set_patch_temporal_extent import DataSetPatchTemporalExtent
from agrimetrics_python_sdk.model.published_status import PublishedStatus
from agrimetrics_python_sdk.model.resource import Resource
from agrimetrics_python_sdk.model.taxonomy_keywords import TaxonomyKeywords
from agrimetrics_python_sdk.model.topic import Topic
from agrimetrics_python_sdk.model.workflow_keywords import WorkflowKeywords
