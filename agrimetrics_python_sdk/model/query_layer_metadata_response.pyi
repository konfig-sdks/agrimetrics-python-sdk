# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class QueryLayerMetadataResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "outputFormats",
            "layerId",
            "description",
            "geometry",
            "links",
        }
        
        class properties:
            description = schemas.StrSchema
            layerId = schemas.StrSchema
        
            @staticmethod
            def links() -> typing.Type['QueryLayerMetadataResponseLinks']:
                return QueryLayerMetadataResponseLinks
        
            @staticmethod
            def geometry() -> typing.Type['BoundingBox']:
                return BoundingBox
            
            
            class outputFormats(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OutputFormats']:
                        return OutputFormats
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OutputFormats'], typing.List['OutputFormats']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'outputFormats':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OutputFormats':
                    return super().__getitem__(i)
        
            @staticmethod
            def times() -> typing.Type['Times']:
                return Times
            __annotations__ = {
                "description": description,
                "layerId": layerId,
                "links": links,
                "geometry": geometry,
                "outputFormats": outputFormats,
                "times": times,
            }
    
    outputFormats: MetaOapg.properties.outputFormats
    layerId: MetaOapg.properties.layerId
    description: MetaOapg.properties.description
    geometry: 'BoundingBox'
    links: 'QueryLayerMetadataResponseLinks'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layerId"]) -> MetaOapg.properties.layerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["links"]) -> 'QueryLayerMetadataResponseLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["geometry"]) -> 'BoundingBox': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputFormats"]) -> MetaOapg.properties.outputFormats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["times"]) -> 'Times': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "layerId", "links", "geometry", "outputFormats", "times", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layerId"]) -> MetaOapg.properties.layerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["links"]) -> 'QueryLayerMetadataResponseLinks': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["geometry"]) -> 'BoundingBox': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputFormats"]) -> MetaOapg.properties.outputFormats: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["times"]) -> typing.Union['Times', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "layerId", "links", "geometry", "outputFormats", "times", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        outputFormats: typing.Union[MetaOapg.properties.outputFormats, list, tuple, ],
        layerId: typing.Union[MetaOapg.properties.layerId, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        geometry: 'BoundingBox',
        links: 'QueryLayerMetadataResponseLinks',
        times: typing.Union['Times', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QueryLayerMetadataResponse':
        return super().__new__(
            cls,
            *args,
            outputFormats=outputFormats,
            layerId=layerId,
            description=description,
            geometry=geometry,
            links=links,
            times=times,
            _configuration=_configuration,
            **kwargs,
        )

from agrimetrics_python_sdk.model.bounding_box import BoundingBox
from agrimetrics_python_sdk.model.output_formats import OutputFormats
from agrimetrics_python_sdk.model.query_layer_metadata_response_links import QueryLayerMetadataResponseLinks
from agrimetrics_python_sdk.model.times import Times
