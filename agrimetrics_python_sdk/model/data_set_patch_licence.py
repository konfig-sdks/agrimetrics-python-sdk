# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class DataSetPatchLicence(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Licensing information and access constraint
    """


    class MetaOapg:
        required = {
            "text",
        }
        
        class properties:
            text = schemas.StrSchema
            url = schemas.StrSchema
            useLimitationStatement = schemas.StrSchema
            attributionStatement = schemas.StrSchema
            useConstraints = schemas.StrSchema
            __annotations__ = {
                "text": text,
                "url": url,
                "useLimitationStatement": useLimitationStatement,
                "attributionStatement": attributionStatement,
                "useConstraints": useConstraints,
            }

    
    text: MetaOapg.properties.text
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useLimitationStatement"]) -> MetaOapg.properties.useLimitationStatement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributionStatement"]) -> MetaOapg.properties.attributionStatement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["useConstraints"]) -> MetaOapg.properties.useConstraints: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["text", "url", "useLimitationStatement", "attributionStatement", "useConstraints", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useLimitationStatement"]) -> typing.Union[MetaOapg.properties.useLimitationStatement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributionStatement"]) -> typing.Union[MetaOapg.properties.attributionStatement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["useConstraints"]) -> typing.Union[MetaOapg.properties.useConstraints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["text", "url", "useLimitationStatement", "attributionStatement", "useConstraints", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        useLimitationStatement: typing.Union[MetaOapg.properties.useLimitationStatement, str, schemas.Unset] = schemas.unset,
        attributionStatement: typing.Union[MetaOapg.properties.attributionStatement, str, schemas.Unset] = schemas.unset,
        useConstraints: typing.Union[MetaOapg.properties.useConstraints, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataSetPatchLicence':
        return super().__new__(
            cls,
            *args,
            url=url,
            useLimitationStatement=useLimitationStatement,
            attributionStatement=attributionStatement,
            useConstraints=useConstraints,
            _configuration=_configuration,
            **kwargs,
        )
