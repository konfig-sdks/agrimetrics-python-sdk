# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401


class Entitlements(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The entitlements an identity has on a resource
    """


    class MetaOapg:
        required = {
            "catalog",
            "isAdmin",
        }
        
        class properties:
        
            @staticmethod
            def catalog() -> typing.Type['EntitlementsCatalog']:
                return EntitlementsCatalog
            isAdmin = schemas.BoolSchema
        
            @staticmethod
            def dataSet() -> typing.Type['EntitlementsDataSet']:
                return EntitlementsDataSet
            __annotations__ = {
                "catalog": catalog,
                "isAdmin": isAdmin,
                "dataSet": dataSet,
            }
    
    catalog: 'EntitlementsCatalog'
    isAdmin: MetaOapg.properties.isAdmin
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["catalog"]) -> 'EntitlementsCatalog': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAdmin"]) -> MetaOapg.properties.isAdmin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSet"]) -> 'EntitlementsDataSet': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["catalog", "isAdmin", "dataSet", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["catalog"]) -> 'EntitlementsCatalog': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAdmin"]) -> MetaOapg.properties.isAdmin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSet"]) -> typing.Union['EntitlementsDataSet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["catalog", "isAdmin", "dataSet", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        catalog: 'EntitlementsCatalog',
        isAdmin: typing.Union[MetaOapg.properties.isAdmin, bool, ],
        dataSet: typing.Union['EntitlementsDataSet', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Entitlements':
        return super().__new__(
            cls,
            *args,
            catalog=catalog,
            isAdmin=isAdmin,
            dataSet=dataSet,
            _configuration=_configuration,
            **kwargs,
        )

from agrimetrics_python_sdk.model.entitlements_catalog import EntitlementsCatalog
from agrimetrics_python_sdk.model.entitlements_data_set import EntitlementsDataSet
