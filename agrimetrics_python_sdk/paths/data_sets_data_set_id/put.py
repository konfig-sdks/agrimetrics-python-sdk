# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from agrimetrics_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from agrimetrics_python_sdk.api_response import AsyncGeneratorResponse
from agrimetrics_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401

from agrimetrics_python_sdk.model.basic_data_set_info import BasicDataSetInfo as BasicDataSetInfoSchema
from agrimetrics_python_sdk.model.data_set_data_set import DataSetDataSet as DataSetDataSetSchema
from agrimetrics_python_sdk.model.accrual_periodicity import AccrualPeriodicity as AccrualPeriodicitySchema
from agrimetrics_python_sdk.model.draft_status import DraftStatus as DraftStatusSchema
from agrimetrics_python_sdk.model.data_set_alternative_titles import DataSetAlternativeTitles as DataSetAlternativeTitlesSchema
from agrimetrics_python_sdk.model.data_set_distributions import DataSetDistributions as DataSetDistributionsSchema
from agrimetrics_python_sdk.model.licence import Licence as LicenceSchema
from agrimetrics_python_sdk.model.published_status import PublishedStatus as PublishedStatusSchema
from agrimetrics_python_sdk.model.data_set_entitlements_by_identity import DataSetEntitlementsByIdentity as DataSetEntitlementsByIdentitySchema
from agrimetrics_python_sdk.model.data_set_derived_from import DataSetDerivedFrom as DataSetDerivedFromSchema
from agrimetrics_python_sdk.model.resource import Resource as ResourceSchema
from agrimetrics_python_sdk.model.data_set_keywords import DataSetKeywords as DataSetKeywordsSchema
from agrimetrics_python_sdk.model.image_representation import ImageRepresentation as ImageRepresentationSchema
from agrimetrics_python_sdk.model.data_set import DataSet as DataSetSchema
from agrimetrics_python_sdk.model.data_set_concepts import DataSetConcepts as DataSetConceptsSchema
from agrimetrics_python_sdk.model.data_format import DataFormat as DataFormatSchema
from agrimetrics_python_sdk.model.topic import Topic as TopicSchema
from agrimetrics_python_sdk.model.data_set_sample_data import DataSetSampleData as DataSetSampleDataSchema
from agrimetrics_python_sdk.model.taxonomy_keywords import TaxonomyKeywords as TaxonomyKeywordsSchema
from agrimetrics_python_sdk.model.contact import Contact as ContactSchema
from agrimetrics_python_sdk.model.public_contact import PublicContact as PublicContactSchema
from agrimetrics_python_sdk.model.geospatial_extent import GeospatialExtent as GeospatialExtentSchema
from agrimetrics_python_sdk.model.entitlement import Entitlement as EntitlementSchema
from agrimetrics_python_sdk.model.workflow_keywords import WorkflowKeywords as WorkflowKeywordsSchema
from agrimetrics_python_sdk.model.category_value import CategoryValue as CategoryValueSchema
from agrimetrics_python_sdk.model.exchange import Exchange as ExchangeSchema
from agrimetrics_python_sdk.model.data_set_services import DataSetServices as DataSetServicesSchema
from agrimetrics_python_sdk.model.entry_type import EntryType as EntryTypeSchema
from agrimetrics_python_sdk.model.data_set_tags import DataSetTags as DataSetTagsSchema
from agrimetrics_python_sdk.model.spatial_coverage import SpatialCoverage as SpatialCoverageSchema

from agrimetrics_python_sdk.type.data_set_entitlements_by_identity import DataSetEntitlementsByIdentity
from agrimetrics_python_sdk.type.accrual_periodicity import AccrualPeriodicity
from agrimetrics_python_sdk.type.data_set_keywords import DataSetKeywords
from agrimetrics_python_sdk.type.exchange import Exchange
from agrimetrics_python_sdk.type.licence import Licence
from agrimetrics_python_sdk.type.data_set_alternative_titles import DataSetAlternativeTitles
from agrimetrics_python_sdk.type.data_set import DataSet
from agrimetrics_python_sdk.type.topic import Topic
from agrimetrics_python_sdk.type.public_contact import PublicContact
from agrimetrics_python_sdk.type.published_status import PublishedStatus
from agrimetrics_python_sdk.type.taxonomy_keywords import TaxonomyKeywords
from agrimetrics_python_sdk.type.data_set_derived_from import DataSetDerivedFrom
from agrimetrics_python_sdk.type.data_set_sample_data import DataSetSampleData
from agrimetrics_python_sdk.type.data_set_data_set import DataSetDataSet
from agrimetrics_python_sdk.type.data_format import DataFormat
from agrimetrics_python_sdk.type.image_representation import ImageRepresentation
from agrimetrics_python_sdk.type.draft_status import DraftStatus
from agrimetrics_python_sdk.type.contact import Contact
from agrimetrics_python_sdk.type.basic_data_set_info import BasicDataSetInfo
from agrimetrics_python_sdk.type.resource import Resource
from agrimetrics_python_sdk.type.entitlement import Entitlement
from agrimetrics_python_sdk.type.spatial_coverage import SpatialCoverage
from agrimetrics_python_sdk.type.data_set_distributions import DataSetDistributions
from agrimetrics_python_sdk.type.geospatial_extent import GeospatialExtent
from agrimetrics_python_sdk.type.data_set_concepts import DataSetConcepts
from agrimetrics_python_sdk.type.entry_type import EntryType
from agrimetrics_python_sdk.type.data_set_tags import DataSetTags
from agrimetrics_python_sdk.type.data_set_services import DataSetServices
from agrimetrics_python_sdk.type.workflow_keywords import WorkflowKeywords
from agrimetrics_python_sdk.type.category_value import CategoryValue

from ...api_client import Dictionary
from agrimetrics_python_sdk.pydantic.workflow_keywords import WorkflowKeywords as WorkflowKeywordsPydantic
from agrimetrics_python_sdk.pydantic.data_set_derived_from import DataSetDerivedFrom as DataSetDerivedFromPydantic
from agrimetrics_python_sdk.pydantic.topic import Topic as TopicPydantic
from agrimetrics_python_sdk.pydantic.geospatial_extent import GeospatialExtent as GeospatialExtentPydantic
from agrimetrics_python_sdk.pydantic.entry_type import EntryType as EntryTypePydantic
from agrimetrics_python_sdk.pydantic.basic_data_set_info import BasicDataSetInfo as BasicDataSetInfoPydantic
from agrimetrics_python_sdk.pydantic.data_set_services import DataSetServices as DataSetServicesPydantic
from agrimetrics_python_sdk.pydantic.entitlement import Entitlement as EntitlementPydantic
from agrimetrics_python_sdk.pydantic.data_set import DataSet as DataSetPydantic
from agrimetrics_python_sdk.pydantic.draft_status import DraftStatus as DraftStatusPydantic
from agrimetrics_python_sdk.pydantic.resource import Resource as ResourcePydantic
from agrimetrics_python_sdk.pydantic.data_set_keywords import DataSetKeywords as DataSetKeywordsPydantic
from agrimetrics_python_sdk.pydantic.taxonomy_keywords import TaxonomyKeywords as TaxonomyKeywordsPydantic
from agrimetrics_python_sdk.pydantic.image_representation import ImageRepresentation as ImageRepresentationPydantic
from agrimetrics_python_sdk.pydantic.licence import Licence as LicencePydantic
from agrimetrics_python_sdk.pydantic.data_format import DataFormat as DataFormatPydantic
from agrimetrics_python_sdk.pydantic.published_status import PublishedStatus as PublishedStatusPydantic
from agrimetrics_python_sdk.pydantic.accrual_periodicity import AccrualPeriodicity as AccrualPeriodicityPydantic
from agrimetrics_python_sdk.pydantic.public_contact import PublicContact as PublicContactPydantic
from agrimetrics_python_sdk.pydantic.data_set_data_set import DataSetDataSet as DataSetDataSetPydantic
from agrimetrics_python_sdk.pydantic.category_value import CategoryValue as CategoryValuePydantic
from agrimetrics_python_sdk.pydantic.data_set_alternative_titles import DataSetAlternativeTitles as DataSetAlternativeTitlesPydantic
from agrimetrics_python_sdk.pydantic.data_set_concepts import DataSetConcepts as DataSetConceptsPydantic
from agrimetrics_python_sdk.pydantic.data_set_tags import DataSetTags as DataSetTagsPydantic
from agrimetrics_python_sdk.pydantic.spatial_coverage import SpatialCoverage as SpatialCoveragePydantic
from agrimetrics_python_sdk.pydantic.data_set_sample_data import DataSetSampleData as DataSetSampleDataPydantic
from agrimetrics_python_sdk.pydantic.data_set_entitlements_by_identity import DataSetEntitlementsByIdentity as DataSetEntitlementsByIdentityPydantic
from agrimetrics_python_sdk.pydantic.contact import Contact as ContactPydantic
from agrimetrics_python_sdk.pydantic.data_set_distributions import DataSetDistributions as DataSetDistributionsPydantic
from agrimetrics_python_sdk.pydantic.exchange import Exchange as ExchangePydantic

from . import path

# Path params
DataSetIdSchema = schemas.UUIDSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'dataSetId': typing.Union[DataSetIdSchema, str, uuid.UUID, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_data_set_id = api_client.PathParameter(
    name="dataSetId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=DataSetIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = DataSetSchema


request_body_data_set = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = DataSetSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: DataSet


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: DataSet


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_single_entry_mapped_args(
        self,
        title: str,
        description: str,
        entry_type: EntryType,
        data_set_id: str,
        tags: typing.Optional[DataSetTags] = None,
        summary: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        alternative_titles: typing.Optional[DataSetAlternativeTitles] = None,
        scoring_uri: typing.Optional[str] = None,
        endpoint_key: typing.Optional[str] = None,
        is_owner: typing.Optional[bool] = None,
        publisher: typing.Optional[str] = None,
        created_at: typing.Optional[typing.Union[int, float]] = None,
        published: typing.Optional[typing.Union[int, float]] = None,
        metadata_modified: typing.Optional[typing.Union[int, float]] = None,
        used_by: typing.Optional[typing.List[BasicDataSetInfo]] = None,
        derived_from: typing.Optional[DataSetDerivedFrom] = None,
        entitlements: typing.Optional[typing.List[Entitlement]] = None,
        entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = None,
        creator: typing.Optional[str] = None,
        data_reliability: typing.Optional[str] = None,
        license: typing.Optional[str] = None,
        licence: typing.Optional[Licence] = None,
        landing_page: typing.Optional[str] = None,
        resources: typing.Optional[typing.List[Resource]] = None,
        data_formats: typing.Optional[typing.List[DataFormat]] = None,
        pricing_description: typing.Optional[str] = None,
        spatial_coverage: typing.Optional[SpatialCoverage] = None,
        spatial_resolution: typing.Optional[typing.Union[int, float]] = None,
        geospatial_extent: typing.Optional[GeospatialExtent] = None,
        temporal_coverage: typing.Optional[str] = None,
        temporal_resolution: typing.Optional[str] = None,
        accrual_periodicity: typing.Optional[AccrualPeriodicity] = None,
        distributions: typing.Optional[DataSetDistributions] = None,
        issued: typing.Optional[str] = None,
        modified: typing.Optional[typing.Union[int, float]] = None,
        keywords: typing.Optional[DataSetKeywords] = None,
        topics: typing.Optional[typing.List[Topic]] = None,
        workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = None,
        taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = None,
        items: typing.Optional[CategoryValue] = None,
        visibility: typing.Optional[str] = None,
        concepts: typing.Optional[DataSetConcepts] = None,
        data_set: typing.Optional[DataSetDataSet] = None,
        services: typing.Optional[DataSetServices] = None,
        sample_data: typing.Optional[DataSetSampleData] = None,
        image: typing.Optional[ImageRepresentation] = None,
        coordinate_reference_system_id: typing.Optional[str] = None,
        spatial_representation_type: typing.Optional[str] = None,
        lineage: typing.Optional[str] = None,
        from_template: typing.Optional[str] = None,
        contacts: typing.Optional[typing.List[Contact]] = None,
        metadata_contact: typing.Optional[Contact] = None,
        public_contact: typing.Optional[PublicContact] = None,
        approval_for_access_number: typing.Optional[typing.Union[int, float]] = None,
        approval_for_access_status: typing.Optional[str] = None,
        language: typing.Optional[str] = None,
        character_set: typing.Optional[str] = None,
        hierarchy_level: typing.Optional[str] = None,
        metadata_language: typing.Optional[str] = None,
        metadata_character_set: typing.Optional[str] = None,
        metadata_standard_name: typing.Optional[str] = None,
        metadata_standard_version: typing.Optional[str] = None,
        draft_status: typing.Optional[DraftStatus] = None,
        draft_notes: typing.Optional[str] = None,
        published_status: typing.Optional[PublishedStatus] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if tags is not None:
            _body["tags"] = tags
        if summary is not None:
            _body["summary"] = summary
        if title is not None:
            _body["title"] = title
        if description is not None:
            _body["description"] = description
        if id is not None:
            _body["id"] = id
        if entry_type is not None:
            _body["entryType"] = entry_type
        if exchange is not None:
            _body["exchange"] = exchange
        if alternative_titles is not None:
            _body["alternativeTitles"] = alternative_titles
        if scoring_uri is not None:
            _body["scoringURI"] = scoring_uri
        if endpoint_key is not None:
            _body["endpointKey"] = endpoint_key
        if is_owner is not None:
            _body["isOwner"] = is_owner
        if publisher is not None:
            _body["publisher"] = publisher
        if created_at is not None:
            _body["createdAt"] = created_at
        if published is not None:
            _body["published"] = published
        if metadata_modified is not None:
            _body["metadataModified"] = metadata_modified
        if used_by is not None:
            _body["usedBy"] = used_by
        if derived_from is not None:
            _body["derivedFrom"] = derived_from
        if entitlements is not None:
            _body["entitlements"] = entitlements
        if entitlements_by_identity is not None:
            _body["entitlementsByIdentity"] = entitlements_by_identity
        if creator is not None:
            _body["creator"] = creator
        if data_reliability is not None:
            _body["dataReliability"] = data_reliability
        if license is not None:
            _body["license"] = license
        if licence is not None:
            _body["licence"] = licence
        if landing_page is not None:
            _body["landingPage"] = landing_page
        if resources is not None:
            _body["resources"] = resources
        if data_formats is not None:
            _body["dataFormats"] = data_formats
        if pricing_description is not None:
            _body["pricingDescription"] = pricing_description
        if spatial_coverage is not None:
            _body["spatialCoverage"] = spatial_coverage
        if spatial_resolution is not None:
            _body["spatialResolution"] = spatial_resolution
        if geospatial_extent is not None:
            _body["geospatialExtent"] = geospatial_extent
        if temporal_coverage is not None:
            _body["temporalCoverage"] = temporal_coverage
        if temporal_resolution is not None:
            _body["temporalResolution"] = temporal_resolution
        if accrual_periodicity is not None:
            _body["accrualPeriodicity"] = accrual_periodicity
        if distributions is not None:
            _body["distributions"] = distributions
        if issued is not None:
            _body["issued"] = issued
        if modified is not None:
            _body["modified"] = modified
        if keywords is not None:
            _body["keywords"] = keywords
        if topics is not None:
            _body["topics"] = topics
        if workflow_keywords is not None:
            _body["workflowKeywords"] = workflow_keywords
        if taxonomy_keywords is not None:
            _body["taxonomyKeywords"] = taxonomy_keywords
        if items is not None:
            _body["items"] = items
        if visibility is not None:
            _body["visibility"] = visibility
        if concepts is not None:
            _body["concepts"] = concepts
        if data_set is not None:
            _body["dataSet"] = data_set
        if services is not None:
            _body["services"] = services
        if sample_data is not None:
            _body["sampleData"] = sample_data
        if image is not None:
            _body["image"] = image
        if coordinate_reference_system_id is not None:
            _body["coordinateReferenceSystemId"] = coordinate_reference_system_id
        if spatial_representation_type is not None:
            _body["spatialRepresentationType"] = spatial_representation_type
        if lineage is not None:
            _body["lineage"] = lineage
        if from_template is not None:
            _body["fromTemplate"] = from_template
        if contacts is not None:
            _body["contacts"] = contacts
        if metadata_contact is not None:
            _body["metadataContact"] = metadata_contact
        if public_contact is not None:
            _body["publicContact"] = public_contact
        if approval_for_access_number is not None:
            _body["approvalForAccessNumber"] = approval_for_access_number
        if approval_for_access_status is not None:
            _body["approvalForAccessStatus"] = approval_for_access_status
        if language is not None:
            _body["language"] = language
        if character_set is not None:
            _body["characterSet"] = character_set
        if hierarchy_level is not None:
            _body["hierarchyLevel"] = hierarchy_level
        if metadata_language is not None:
            _body["metadataLanguage"] = metadata_language
        if metadata_character_set is not None:
            _body["metadataCharacterSet"] = metadata_character_set
        if metadata_standard_name is not None:
            _body["metadataStandardName"] = metadata_standard_name
        if metadata_standard_version is not None:
            _body["metadataStandardVersion"] = metadata_standard_version
        if draft_status is not None:
            _body["draftStatus"] = draft_status
        if draft_notes is not None:
            _body["draftNotes"] = draft_notes
        if published_status is not None:
            _body["publishedStatus"] = published_status
        args.body = _body
        if data_set_id is not None:
            _path_params["dataSetId"] = data_set_id
        args.path = _path_params
        return args

    async def _aupdate_single_entry_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update a single data set catalog entry.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_data_set_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/data-sets/{dataSetId}',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_data_set.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_single_entry_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update a single data set catalog entry.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_data_set_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'put'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/data-sets/{dataSetId}',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_data_set.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateSingleEntryRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_single_entry(
        self,
        title: str,
        description: str,
        entry_type: EntryType,
        data_set_id: str,
        tags: typing.Optional[DataSetTags] = None,
        summary: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        alternative_titles: typing.Optional[DataSetAlternativeTitles] = None,
        scoring_uri: typing.Optional[str] = None,
        endpoint_key: typing.Optional[str] = None,
        is_owner: typing.Optional[bool] = None,
        publisher: typing.Optional[str] = None,
        created_at: typing.Optional[typing.Union[int, float]] = None,
        published: typing.Optional[typing.Union[int, float]] = None,
        metadata_modified: typing.Optional[typing.Union[int, float]] = None,
        used_by: typing.Optional[typing.List[BasicDataSetInfo]] = None,
        derived_from: typing.Optional[DataSetDerivedFrom] = None,
        entitlements: typing.Optional[typing.List[Entitlement]] = None,
        entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = None,
        creator: typing.Optional[str] = None,
        data_reliability: typing.Optional[str] = None,
        license: typing.Optional[str] = None,
        licence: typing.Optional[Licence] = None,
        landing_page: typing.Optional[str] = None,
        resources: typing.Optional[typing.List[Resource]] = None,
        data_formats: typing.Optional[typing.List[DataFormat]] = None,
        pricing_description: typing.Optional[str] = None,
        spatial_coverage: typing.Optional[SpatialCoverage] = None,
        spatial_resolution: typing.Optional[typing.Union[int, float]] = None,
        geospatial_extent: typing.Optional[GeospatialExtent] = None,
        temporal_coverage: typing.Optional[str] = None,
        temporal_resolution: typing.Optional[str] = None,
        accrual_periodicity: typing.Optional[AccrualPeriodicity] = None,
        distributions: typing.Optional[DataSetDistributions] = None,
        issued: typing.Optional[str] = None,
        modified: typing.Optional[typing.Union[int, float]] = None,
        keywords: typing.Optional[DataSetKeywords] = None,
        topics: typing.Optional[typing.List[Topic]] = None,
        workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = None,
        taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = None,
        items: typing.Optional[CategoryValue] = None,
        visibility: typing.Optional[str] = None,
        concepts: typing.Optional[DataSetConcepts] = None,
        data_set: typing.Optional[DataSetDataSet] = None,
        services: typing.Optional[DataSetServices] = None,
        sample_data: typing.Optional[DataSetSampleData] = None,
        image: typing.Optional[ImageRepresentation] = None,
        coordinate_reference_system_id: typing.Optional[str] = None,
        spatial_representation_type: typing.Optional[str] = None,
        lineage: typing.Optional[str] = None,
        from_template: typing.Optional[str] = None,
        contacts: typing.Optional[typing.List[Contact]] = None,
        metadata_contact: typing.Optional[Contact] = None,
        public_contact: typing.Optional[PublicContact] = None,
        approval_for_access_number: typing.Optional[typing.Union[int, float]] = None,
        approval_for_access_status: typing.Optional[str] = None,
        language: typing.Optional[str] = None,
        character_set: typing.Optional[str] = None,
        hierarchy_level: typing.Optional[str] = None,
        metadata_language: typing.Optional[str] = None,
        metadata_character_set: typing.Optional[str] = None,
        metadata_standard_name: typing.Optional[str] = None,
        metadata_standard_version: typing.Optional[str] = None,
        draft_status: typing.Optional[DraftStatus] = None,
        draft_notes: typing.Optional[str] = None,
        published_status: typing.Optional[PublishedStatus] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_single_entry_mapped_args(
            title=title,
            description=description,
            entry_type=entry_type,
            data_set_id=data_set_id,
            tags=tags,
            summary=summary,
            id=id,
            exchange=exchange,
            alternative_titles=alternative_titles,
            scoring_uri=scoring_uri,
            endpoint_key=endpoint_key,
            is_owner=is_owner,
            publisher=publisher,
            created_at=created_at,
            published=published,
            metadata_modified=metadata_modified,
            used_by=used_by,
            derived_from=derived_from,
            entitlements=entitlements,
            entitlements_by_identity=entitlements_by_identity,
            creator=creator,
            data_reliability=data_reliability,
            license=license,
            licence=licence,
            landing_page=landing_page,
            resources=resources,
            data_formats=data_formats,
            pricing_description=pricing_description,
            spatial_coverage=spatial_coverage,
            spatial_resolution=spatial_resolution,
            geospatial_extent=geospatial_extent,
            temporal_coverage=temporal_coverage,
            temporal_resolution=temporal_resolution,
            accrual_periodicity=accrual_periodicity,
            distributions=distributions,
            issued=issued,
            modified=modified,
            keywords=keywords,
            topics=topics,
            workflow_keywords=workflow_keywords,
            taxonomy_keywords=taxonomy_keywords,
            items=items,
            visibility=visibility,
            concepts=concepts,
            data_set=data_set,
            services=services,
            sample_data=sample_data,
            image=image,
            coordinate_reference_system_id=coordinate_reference_system_id,
            spatial_representation_type=spatial_representation_type,
            lineage=lineage,
            from_template=from_template,
            contacts=contacts,
            metadata_contact=metadata_contact,
            public_contact=public_contact,
            approval_for_access_number=approval_for_access_number,
            approval_for_access_status=approval_for_access_status,
            language=language,
            character_set=character_set,
            hierarchy_level=hierarchy_level,
            metadata_language=metadata_language,
            metadata_character_set=metadata_character_set,
            metadata_standard_name=metadata_standard_name,
            metadata_standard_version=metadata_standard_version,
            draft_status=draft_status,
            draft_notes=draft_notes,
            published_status=published_status,
        )
        return await self._aupdate_single_entry_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_single_entry(
        self,
        title: str,
        description: str,
        entry_type: EntryType,
        data_set_id: str,
        tags: typing.Optional[DataSetTags] = None,
        summary: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        alternative_titles: typing.Optional[DataSetAlternativeTitles] = None,
        scoring_uri: typing.Optional[str] = None,
        endpoint_key: typing.Optional[str] = None,
        is_owner: typing.Optional[bool] = None,
        publisher: typing.Optional[str] = None,
        created_at: typing.Optional[typing.Union[int, float]] = None,
        published: typing.Optional[typing.Union[int, float]] = None,
        metadata_modified: typing.Optional[typing.Union[int, float]] = None,
        used_by: typing.Optional[typing.List[BasicDataSetInfo]] = None,
        derived_from: typing.Optional[DataSetDerivedFrom] = None,
        entitlements: typing.Optional[typing.List[Entitlement]] = None,
        entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = None,
        creator: typing.Optional[str] = None,
        data_reliability: typing.Optional[str] = None,
        license: typing.Optional[str] = None,
        licence: typing.Optional[Licence] = None,
        landing_page: typing.Optional[str] = None,
        resources: typing.Optional[typing.List[Resource]] = None,
        data_formats: typing.Optional[typing.List[DataFormat]] = None,
        pricing_description: typing.Optional[str] = None,
        spatial_coverage: typing.Optional[SpatialCoverage] = None,
        spatial_resolution: typing.Optional[typing.Union[int, float]] = None,
        geospatial_extent: typing.Optional[GeospatialExtent] = None,
        temporal_coverage: typing.Optional[str] = None,
        temporal_resolution: typing.Optional[str] = None,
        accrual_periodicity: typing.Optional[AccrualPeriodicity] = None,
        distributions: typing.Optional[DataSetDistributions] = None,
        issued: typing.Optional[str] = None,
        modified: typing.Optional[typing.Union[int, float]] = None,
        keywords: typing.Optional[DataSetKeywords] = None,
        topics: typing.Optional[typing.List[Topic]] = None,
        workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = None,
        taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = None,
        items: typing.Optional[CategoryValue] = None,
        visibility: typing.Optional[str] = None,
        concepts: typing.Optional[DataSetConcepts] = None,
        data_set: typing.Optional[DataSetDataSet] = None,
        services: typing.Optional[DataSetServices] = None,
        sample_data: typing.Optional[DataSetSampleData] = None,
        image: typing.Optional[ImageRepresentation] = None,
        coordinate_reference_system_id: typing.Optional[str] = None,
        spatial_representation_type: typing.Optional[str] = None,
        lineage: typing.Optional[str] = None,
        from_template: typing.Optional[str] = None,
        contacts: typing.Optional[typing.List[Contact]] = None,
        metadata_contact: typing.Optional[Contact] = None,
        public_contact: typing.Optional[PublicContact] = None,
        approval_for_access_number: typing.Optional[typing.Union[int, float]] = None,
        approval_for_access_status: typing.Optional[str] = None,
        language: typing.Optional[str] = None,
        character_set: typing.Optional[str] = None,
        hierarchy_level: typing.Optional[str] = None,
        metadata_language: typing.Optional[str] = None,
        metadata_character_set: typing.Optional[str] = None,
        metadata_standard_name: typing.Optional[str] = None,
        metadata_standard_version: typing.Optional[str] = None,
        draft_status: typing.Optional[DraftStatus] = None,
        draft_notes: typing.Optional[str] = None,
        published_status: typing.Optional[PublishedStatus] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_single_entry_mapped_args(
            title=title,
            description=description,
            entry_type=entry_type,
            data_set_id=data_set_id,
            tags=tags,
            summary=summary,
            id=id,
            exchange=exchange,
            alternative_titles=alternative_titles,
            scoring_uri=scoring_uri,
            endpoint_key=endpoint_key,
            is_owner=is_owner,
            publisher=publisher,
            created_at=created_at,
            published=published,
            metadata_modified=metadata_modified,
            used_by=used_by,
            derived_from=derived_from,
            entitlements=entitlements,
            entitlements_by_identity=entitlements_by_identity,
            creator=creator,
            data_reliability=data_reliability,
            license=license,
            licence=licence,
            landing_page=landing_page,
            resources=resources,
            data_formats=data_formats,
            pricing_description=pricing_description,
            spatial_coverage=spatial_coverage,
            spatial_resolution=spatial_resolution,
            geospatial_extent=geospatial_extent,
            temporal_coverage=temporal_coverage,
            temporal_resolution=temporal_resolution,
            accrual_periodicity=accrual_periodicity,
            distributions=distributions,
            issued=issued,
            modified=modified,
            keywords=keywords,
            topics=topics,
            workflow_keywords=workflow_keywords,
            taxonomy_keywords=taxonomy_keywords,
            items=items,
            visibility=visibility,
            concepts=concepts,
            data_set=data_set,
            services=services,
            sample_data=sample_data,
            image=image,
            coordinate_reference_system_id=coordinate_reference_system_id,
            spatial_representation_type=spatial_representation_type,
            lineage=lineage,
            from_template=from_template,
            contacts=contacts,
            metadata_contact=metadata_contact,
            public_contact=public_contact,
            approval_for_access_number=approval_for_access_number,
            approval_for_access_status=approval_for_access_status,
            language=language,
            character_set=character_set,
            hierarchy_level=hierarchy_level,
            metadata_language=metadata_language,
            metadata_character_set=metadata_character_set,
            metadata_standard_name=metadata_standard_name,
            metadata_standard_version=metadata_standard_version,
            draft_status=draft_status,
            draft_notes=draft_notes,
            published_status=published_status,
        )
        return self._update_single_entry_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateSingleEntry(BaseApi):

    async def aupdate_single_entry(
        self,
        title: str,
        description: str,
        entry_type: EntryType,
        data_set_id: str,
        tags: typing.Optional[DataSetTags] = None,
        summary: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        alternative_titles: typing.Optional[DataSetAlternativeTitles] = None,
        scoring_uri: typing.Optional[str] = None,
        endpoint_key: typing.Optional[str] = None,
        is_owner: typing.Optional[bool] = None,
        publisher: typing.Optional[str] = None,
        created_at: typing.Optional[typing.Union[int, float]] = None,
        published: typing.Optional[typing.Union[int, float]] = None,
        metadata_modified: typing.Optional[typing.Union[int, float]] = None,
        used_by: typing.Optional[typing.List[BasicDataSetInfo]] = None,
        derived_from: typing.Optional[DataSetDerivedFrom] = None,
        entitlements: typing.Optional[typing.List[Entitlement]] = None,
        entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = None,
        creator: typing.Optional[str] = None,
        data_reliability: typing.Optional[str] = None,
        license: typing.Optional[str] = None,
        licence: typing.Optional[Licence] = None,
        landing_page: typing.Optional[str] = None,
        resources: typing.Optional[typing.List[Resource]] = None,
        data_formats: typing.Optional[typing.List[DataFormat]] = None,
        pricing_description: typing.Optional[str] = None,
        spatial_coverage: typing.Optional[SpatialCoverage] = None,
        spatial_resolution: typing.Optional[typing.Union[int, float]] = None,
        geospatial_extent: typing.Optional[GeospatialExtent] = None,
        temporal_coverage: typing.Optional[str] = None,
        temporal_resolution: typing.Optional[str] = None,
        accrual_periodicity: typing.Optional[AccrualPeriodicity] = None,
        distributions: typing.Optional[DataSetDistributions] = None,
        issued: typing.Optional[str] = None,
        modified: typing.Optional[typing.Union[int, float]] = None,
        keywords: typing.Optional[DataSetKeywords] = None,
        topics: typing.Optional[typing.List[Topic]] = None,
        workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = None,
        taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = None,
        items: typing.Optional[CategoryValue] = None,
        visibility: typing.Optional[str] = None,
        concepts: typing.Optional[DataSetConcepts] = None,
        data_set: typing.Optional[DataSetDataSet] = None,
        services: typing.Optional[DataSetServices] = None,
        sample_data: typing.Optional[DataSetSampleData] = None,
        image: typing.Optional[ImageRepresentation] = None,
        coordinate_reference_system_id: typing.Optional[str] = None,
        spatial_representation_type: typing.Optional[str] = None,
        lineage: typing.Optional[str] = None,
        from_template: typing.Optional[str] = None,
        contacts: typing.Optional[typing.List[Contact]] = None,
        metadata_contact: typing.Optional[Contact] = None,
        public_contact: typing.Optional[PublicContact] = None,
        approval_for_access_number: typing.Optional[typing.Union[int, float]] = None,
        approval_for_access_status: typing.Optional[str] = None,
        language: typing.Optional[str] = None,
        character_set: typing.Optional[str] = None,
        hierarchy_level: typing.Optional[str] = None,
        metadata_language: typing.Optional[str] = None,
        metadata_character_set: typing.Optional[str] = None,
        metadata_standard_name: typing.Optional[str] = None,
        metadata_standard_version: typing.Optional[str] = None,
        draft_status: typing.Optional[DraftStatus] = None,
        draft_notes: typing.Optional[str] = None,
        published_status: typing.Optional[PublishedStatus] = None,
        validate: bool = False,
        **kwargs,
    ) -> DataSetPydantic:
        raw_response = await self.raw.aupdate_single_entry(
            title=title,
            description=description,
            entry_type=entry_type,
            data_set_id=data_set_id,
            tags=tags,
            summary=summary,
            id=id,
            exchange=exchange,
            alternative_titles=alternative_titles,
            scoring_uri=scoring_uri,
            endpoint_key=endpoint_key,
            is_owner=is_owner,
            publisher=publisher,
            created_at=created_at,
            published=published,
            metadata_modified=metadata_modified,
            used_by=used_by,
            derived_from=derived_from,
            entitlements=entitlements,
            entitlements_by_identity=entitlements_by_identity,
            creator=creator,
            data_reliability=data_reliability,
            license=license,
            licence=licence,
            landing_page=landing_page,
            resources=resources,
            data_formats=data_formats,
            pricing_description=pricing_description,
            spatial_coverage=spatial_coverage,
            spatial_resolution=spatial_resolution,
            geospatial_extent=geospatial_extent,
            temporal_coverage=temporal_coverage,
            temporal_resolution=temporal_resolution,
            accrual_periodicity=accrual_periodicity,
            distributions=distributions,
            issued=issued,
            modified=modified,
            keywords=keywords,
            topics=topics,
            workflow_keywords=workflow_keywords,
            taxonomy_keywords=taxonomy_keywords,
            items=items,
            visibility=visibility,
            concepts=concepts,
            data_set=data_set,
            services=services,
            sample_data=sample_data,
            image=image,
            coordinate_reference_system_id=coordinate_reference_system_id,
            spatial_representation_type=spatial_representation_type,
            lineage=lineage,
            from_template=from_template,
            contacts=contacts,
            metadata_contact=metadata_contact,
            public_contact=public_contact,
            approval_for_access_number=approval_for_access_number,
            approval_for_access_status=approval_for_access_status,
            language=language,
            character_set=character_set,
            hierarchy_level=hierarchy_level,
            metadata_language=metadata_language,
            metadata_character_set=metadata_character_set,
            metadata_standard_name=metadata_standard_name,
            metadata_standard_version=metadata_standard_version,
            draft_status=draft_status,
            draft_notes=draft_notes,
            published_status=published_status,
            **kwargs,
        )
        if validate:
            return DataSetPydantic(**raw_response.body)
        return api_client.construct_model_instance(DataSetPydantic, raw_response.body)
    
    
    def update_single_entry(
        self,
        title: str,
        description: str,
        entry_type: EntryType,
        data_set_id: str,
        tags: typing.Optional[DataSetTags] = None,
        summary: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        alternative_titles: typing.Optional[DataSetAlternativeTitles] = None,
        scoring_uri: typing.Optional[str] = None,
        endpoint_key: typing.Optional[str] = None,
        is_owner: typing.Optional[bool] = None,
        publisher: typing.Optional[str] = None,
        created_at: typing.Optional[typing.Union[int, float]] = None,
        published: typing.Optional[typing.Union[int, float]] = None,
        metadata_modified: typing.Optional[typing.Union[int, float]] = None,
        used_by: typing.Optional[typing.List[BasicDataSetInfo]] = None,
        derived_from: typing.Optional[DataSetDerivedFrom] = None,
        entitlements: typing.Optional[typing.List[Entitlement]] = None,
        entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = None,
        creator: typing.Optional[str] = None,
        data_reliability: typing.Optional[str] = None,
        license: typing.Optional[str] = None,
        licence: typing.Optional[Licence] = None,
        landing_page: typing.Optional[str] = None,
        resources: typing.Optional[typing.List[Resource]] = None,
        data_formats: typing.Optional[typing.List[DataFormat]] = None,
        pricing_description: typing.Optional[str] = None,
        spatial_coverage: typing.Optional[SpatialCoverage] = None,
        spatial_resolution: typing.Optional[typing.Union[int, float]] = None,
        geospatial_extent: typing.Optional[GeospatialExtent] = None,
        temporal_coverage: typing.Optional[str] = None,
        temporal_resolution: typing.Optional[str] = None,
        accrual_periodicity: typing.Optional[AccrualPeriodicity] = None,
        distributions: typing.Optional[DataSetDistributions] = None,
        issued: typing.Optional[str] = None,
        modified: typing.Optional[typing.Union[int, float]] = None,
        keywords: typing.Optional[DataSetKeywords] = None,
        topics: typing.Optional[typing.List[Topic]] = None,
        workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = None,
        taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = None,
        items: typing.Optional[CategoryValue] = None,
        visibility: typing.Optional[str] = None,
        concepts: typing.Optional[DataSetConcepts] = None,
        data_set: typing.Optional[DataSetDataSet] = None,
        services: typing.Optional[DataSetServices] = None,
        sample_data: typing.Optional[DataSetSampleData] = None,
        image: typing.Optional[ImageRepresentation] = None,
        coordinate_reference_system_id: typing.Optional[str] = None,
        spatial_representation_type: typing.Optional[str] = None,
        lineage: typing.Optional[str] = None,
        from_template: typing.Optional[str] = None,
        contacts: typing.Optional[typing.List[Contact]] = None,
        metadata_contact: typing.Optional[Contact] = None,
        public_contact: typing.Optional[PublicContact] = None,
        approval_for_access_number: typing.Optional[typing.Union[int, float]] = None,
        approval_for_access_status: typing.Optional[str] = None,
        language: typing.Optional[str] = None,
        character_set: typing.Optional[str] = None,
        hierarchy_level: typing.Optional[str] = None,
        metadata_language: typing.Optional[str] = None,
        metadata_character_set: typing.Optional[str] = None,
        metadata_standard_name: typing.Optional[str] = None,
        metadata_standard_version: typing.Optional[str] = None,
        draft_status: typing.Optional[DraftStatus] = None,
        draft_notes: typing.Optional[str] = None,
        published_status: typing.Optional[PublishedStatus] = None,
        validate: bool = False,
    ) -> DataSetPydantic:
        raw_response = self.raw.update_single_entry(
            title=title,
            description=description,
            entry_type=entry_type,
            data_set_id=data_set_id,
            tags=tags,
            summary=summary,
            id=id,
            exchange=exchange,
            alternative_titles=alternative_titles,
            scoring_uri=scoring_uri,
            endpoint_key=endpoint_key,
            is_owner=is_owner,
            publisher=publisher,
            created_at=created_at,
            published=published,
            metadata_modified=metadata_modified,
            used_by=used_by,
            derived_from=derived_from,
            entitlements=entitlements,
            entitlements_by_identity=entitlements_by_identity,
            creator=creator,
            data_reliability=data_reliability,
            license=license,
            licence=licence,
            landing_page=landing_page,
            resources=resources,
            data_formats=data_formats,
            pricing_description=pricing_description,
            spatial_coverage=spatial_coverage,
            spatial_resolution=spatial_resolution,
            geospatial_extent=geospatial_extent,
            temporal_coverage=temporal_coverage,
            temporal_resolution=temporal_resolution,
            accrual_periodicity=accrual_periodicity,
            distributions=distributions,
            issued=issued,
            modified=modified,
            keywords=keywords,
            topics=topics,
            workflow_keywords=workflow_keywords,
            taxonomy_keywords=taxonomy_keywords,
            items=items,
            visibility=visibility,
            concepts=concepts,
            data_set=data_set,
            services=services,
            sample_data=sample_data,
            image=image,
            coordinate_reference_system_id=coordinate_reference_system_id,
            spatial_representation_type=spatial_representation_type,
            lineage=lineage,
            from_template=from_template,
            contacts=contacts,
            metadata_contact=metadata_contact,
            public_contact=public_contact,
            approval_for_access_number=approval_for_access_number,
            approval_for_access_status=approval_for_access_status,
            language=language,
            character_set=character_set,
            hierarchy_level=hierarchy_level,
            metadata_language=metadata_language,
            metadata_character_set=metadata_character_set,
            metadata_standard_name=metadata_standard_name,
            metadata_standard_version=metadata_standard_version,
            draft_status=draft_status,
            draft_notes=draft_notes,
            published_status=published_status,
        )
        if validate:
            return DataSetPydantic(**raw_response.body)
        return api_client.construct_model_instance(DataSetPydantic, raw_response.body)


class ApiForput(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aput(
        self,
        title: str,
        description: str,
        entry_type: EntryType,
        data_set_id: str,
        tags: typing.Optional[DataSetTags] = None,
        summary: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        alternative_titles: typing.Optional[DataSetAlternativeTitles] = None,
        scoring_uri: typing.Optional[str] = None,
        endpoint_key: typing.Optional[str] = None,
        is_owner: typing.Optional[bool] = None,
        publisher: typing.Optional[str] = None,
        created_at: typing.Optional[typing.Union[int, float]] = None,
        published: typing.Optional[typing.Union[int, float]] = None,
        metadata_modified: typing.Optional[typing.Union[int, float]] = None,
        used_by: typing.Optional[typing.List[BasicDataSetInfo]] = None,
        derived_from: typing.Optional[DataSetDerivedFrom] = None,
        entitlements: typing.Optional[typing.List[Entitlement]] = None,
        entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = None,
        creator: typing.Optional[str] = None,
        data_reliability: typing.Optional[str] = None,
        license: typing.Optional[str] = None,
        licence: typing.Optional[Licence] = None,
        landing_page: typing.Optional[str] = None,
        resources: typing.Optional[typing.List[Resource]] = None,
        data_formats: typing.Optional[typing.List[DataFormat]] = None,
        pricing_description: typing.Optional[str] = None,
        spatial_coverage: typing.Optional[SpatialCoverage] = None,
        spatial_resolution: typing.Optional[typing.Union[int, float]] = None,
        geospatial_extent: typing.Optional[GeospatialExtent] = None,
        temporal_coverage: typing.Optional[str] = None,
        temporal_resolution: typing.Optional[str] = None,
        accrual_periodicity: typing.Optional[AccrualPeriodicity] = None,
        distributions: typing.Optional[DataSetDistributions] = None,
        issued: typing.Optional[str] = None,
        modified: typing.Optional[typing.Union[int, float]] = None,
        keywords: typing.Optional[DataSetKeywords] = None,
        topics: typing.Optional[typing.List[Topic]] = None,
        workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = None,
        taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = None,
        items: typing.Optional[CategoryValue] = None,
        visibility: typing.Optional[str] = None,
        concepts: typing.Optional[DataSetConcepts] = None,
        data_set: typing.Optional[DataSetDataSet] = None,
        services: typing.Optional[DataSetServices] = None,
        sample_data: typing.Optional[DataSetSampleData] = None,
        image: typing.Optional[ImageRepresentation] = None,
        coordinate_reference_system_id: typing.Optional[str] = None,
        spatial_representation_type: typing.Optional[str] = None,
        lineage: typing.Optional[str] = None,
        from_template: typing.Optional[str] = None,
        contacts: typing.Optional[typing.List[Contact]] = None,
        metadata_contact: typing.Optional[Contact] = None,
        public_contact: typing.Optional[PublicContact] = None,
        approval_for_access_number: typing.Optional[typing.Union[int, float]] = None,
        approval_for_access_status: typing.Optional[str] = None,
        language: typing.Optional[str] = None,
        character_set: typing.Optional[str] = None,
        hierarchy_level: typing.Optional[str] = None,
        metadata_language: typing.Optional[str] = None,
        metadata_character_set: typing.Optional[str] = None,
        metadata_standard_name: typing.Optional[str] = None,
        metadata_standard_version: typing.Optional[str] = None,
        draft_status: typing.Optional[DraftStatus] = None,
        draft_notes: typing.Optional[str] = None,
        published_status: typing.Optional[PublishedStatus] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_single_entry_mapped_args(
            title=title,
            description=description,
            entry_type=entry_type,
            data_set_id=data_set_id,
            tags=tags,
            summary=summary,
            id=id,
            exchange=exchange,
            alternative_titles=alternative_titles,
            scoring_uri=scoring_uri,
            endpoint_key=endpoint_key,
            is_owner=is_owner,
            publisher=publisher,
            created_at=created_at,
            published=published,
            metadata_modified=metadata_modified,
            used_by=used_by,
            derived_from=derived_from,
            entitlements=entitlements,
            entitlements_by_identity=entitlements_by_identity,
            creator=creator,
            data_reliability=data_reliability,
            license=license,
            licence=licence,
            landing_page=landing_page,
            resources=resources,
            data_formats=data_formats,
            pricing_description=pricing_description,
            spatial_coverage=spatial_coverage,
            spatial_resolution=spatial_resolution,
            geospatial_extent=geospatial_extent,
            temporal_coverage=temporal_coverage,
            temporal_resolution=temporal_resolution,
            accrual_periodicity=accrual_periodicity,
            distributions=distributions,
            issued=issued,
            modified=modified,
            keywords=keywords,
            topics=topics,
            workflow_keywords=workflow_keywords,
            taxonomy_keywords=taxonomy_keywords,
            items=items,
            visibility=visibility,
            concepts=concepts,
            data_set=data_set,
            services=services,
            sample_data=sample_data,
            image=image,
            coordinate_reference_system_id=coordinate_reference_system_id,
            spatial_representation_type=spatial_representation_type,
            lineage=lineage,
            from_template=from_template,
            contacts=contacts,
            metadata_contact=metadata_contact,
            public_contact=public_contact,
            approval_for_access_number=approval_for_access_number,
            approval_for_access_status=approval_for_access_status,
            language=language,
            character_set=character_set,
            hierarchy_level=hierarchy_level,
            metadata_language=metadata_language,
            metadata_character_set=metadata_character_set,
            metadata_standard_name=metadata_standard_name,
            metadata_standard_version=metadata_standard_version,
            draft_status=draft_status,
            draft_notes=draft_notes,
            published_status=published_status,
        )
        return await self._aupdate_single_entry_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def put(
        self,
        title: str,
        description: str,
        entry_type: EntryType,
        data_set_id: str,
        tags: typing.Optional[DataSetTags] = None,
        summary: typing.Optional[str] = None,
        id: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        alternative_titles: typing.Optional[DataSetAlternativeTitles] = None,
        scoring_uri: typing.Optional[str] = None,
        endpoint_key: typing.Optional[str] = None,
        is_owner: typing.Optional[bool] = None,
        publisher: typing.Optional[str] = None,
        created_at: typing.Optional[typing.Union[int, float]] = None,
        published: typing.Optional[typing.Union[int, float]] = None,
        metadata_modified: typing.Optional[typing.Union[int, float]] = None,
        used_by: typing.Optional[typing.List[BasicDataSetInfo]] = None,
        derived_from: typing.Optional[DataSetDerivedFrom] = None,
        entitlements: typing.Optional[typing.List[Entitlement]] = None,
        entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = None,
        creator: typing.Optional[str] = None,
        data_reliability: typing.Optional[str] = None,
        license: typing.Optional[str] = None,
        licence: typing.Optional[Licence] = None,
        landing_page: typing.Optional[str] = None,
        resources: typing.Optional[typing.List[Resource]] = None,
        data_formats: typing.Optional[typing.List[DataFormat]] = None,
        pricing_description: typing.Optional[str] = None,
        spatial_coverage: typing.Optional[SpatialCoverage] = None,
        spatial_resolution: typing.Optional[typing.Union[int, float]] = None,
        geospatial_extent: typing.Optional[GeospatialExtent] = None,
        temporal_coverage: typing.Optional[str] = None,
        temporal_resolution: typing.Optional[str] = None,
        accrual_periodicity: typing.Optional[AccrualPeriodicity] = None,
        distributions: typing.Optional[DataSetDistributions] = None,
        issued: typing.Optional[str] = None,
        modified: typing.Optional[typing.Union[int, float]] = None,
        keywords: typing.Optional[DataSetKeywords] = None,
        topics: typing.Optional[typing.List[Topic]] = None,
        workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = None,
        taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = None,
        items: typing.Optional[CategoryValue] = None,
        visibility: typing.Optional[str] = None,
        concepts: typing.Optional[DataSetConcepts] = None,
        data_set: typing.Optional[DataSetDataSet] = None,
        services: typing.Optional[DataSetServices] = None,
        sample_data: typing.Optional[DataSetSampleData] = None,
        image: typing.Optional[ImageRepresentation] = None,
        coordinate_reference_system_id: typing.Optional[str] = None,
        spatial_representation_type: typing.Optional[str] = None,
        lineage: typing.Optional[str] = None,
        from_template: typing.Optional[str] = None,
        contacts: typing.Optional[typing.List[Contact]] = None,
        metadata_contact: typing.Optional[Contact] = None,
        public_contact: typing.Optional[PublicContact] = None,
        approval_for_access_number: typing.Optional[typing.Union[int, float]] = None,
        approval_for_access_status: typing.Optional[str] = None,
        language: typing.Optional[str] = None,
        character_set: typing.Optional[str] = None,
        hierarchy_level: typing.Optional[str] = None,
        metadata_language: typing.Optional[str] = None,
        metadata_character_set: typing.Optional[str] = None,
        metadata_standard_name: typing.Optional[str] = None,
        metadata_standard_version: typing.Optional[str] = None,
        draft_status: typing.Optional[DraftStatus] = None,
        draft_notes: typing.Optional[str] = None,
        published_status: typing.Optional[PublishedStatus] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_single_entry_mapped_args(
            title=title,
            description=description,
            entry_type=entry_type,
            data_set_id=data_set_id,
            tags=tags,
            summary=summary,
            id=id,
            exchange=exchange,
            alternative_titles=alternative_titles,
            scoring_uri=scoring_uri,
            endpoint_key=endpoint_key,
            is_owner=is_owner,
            publisher=publisher,
            created_at=created_at,
            published=published,
            metadata_modified=metadata_modified,
            used_by=used_by,
            derived_from=derived_from,
            entitlements=entitlements,
            entitlements_by_identity=entitlements_by_identity,
            creator=creator,
            data_reliability=data_reliability,
            license=license,
            licence=licence,
            landing_page=landing_page,
            resources=resources,
            data_formats=data_formats,
            pricing_description=pricing_description,
            spatial_coverage=spatial_coverage,
            spatial_resolution=spatial_resolution,
            geospatial_extent=geospatial_extent,
            temporal_coverage=temporal_coverage,
            temporal_resolution=temporal_resolution,
            accrual_periodicity=accrual_periodicity,
            distributions=distributions,
            issued=issued,
            modified=modified,
            keywords=keywords,
            topics=topics,
            workflow_keywords=workflow_keywords,
            taxonomy_keywords=taxonomy_keywords,
            items=items,
            visibility=visibility,
            concepts=concepts,
            data_set=data_set,
            services=services,
            sample_data=sample_data,
            image=image,
            coordinate_reference_system_id=coordinate_reference_system_id,
            spatial_representation_type=spatial_representation_type,
            lineage=lineage,
            from_template=from_template,
            contacts=contacts,
            metadata_contact=metadata_contact,
            public_contact=public_contact,
            approval_for_access_number=approval_for_access_number,
            approval_for_access_status=approval_for_access_status,
            language=language,
            character_set=character_set,
            hierarchy_level=hierarchy_level,
            metadata_language=metadata_language,
            metadata_character_set=metadata_character_set,
            metadata_standard_name=metadata_standard_name,
            metadata_standard_version=metadata_standard_version,
            draft_status=draft_status,
            draft_notes=draft_notes,
            published_status=published_status,
        )
        return self._update_single_entry_oapg(
            body=args.body,
            path_params=args.path,
        )

