# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from agrimetrics_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from agrimetrics_python_sdk.api_response import AsyncGeneratorResponse
from agrimetrics_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from agrimetrics_python_sdk import schemas  # noqa: F401

from agrimetrics_python_sdk.model.category_value import CategoryValue as CategoryValueSchema
from agrimetrics_python_sdk.model.exchange import Exchange as ExchangeSchema
from agrimetrics_python_sdk.model.relationship import Relationship as RelationshipSchema
from agrimetrics_python_sdk.model.draft_status import DraftStatus as DraftStatusSchema
from agrimetrics_python_sdk.model.data_sets import DataSets as DataSetsSchema
from agrimetrics_python_sdk.model.published_status import PublishedStatus as PublishedStatusSchema
from agrimetrics_python_sdk.model.spatial_coverage import SpatialCoverage as SpatialCoverageSchema

from agrimetrics_python_sdk.type.draft_status import DraftStatus
from agrimetrics_python_sdk.type.published_status import PublishedStatus
from agrimetrics_python_sdk.type.spatial_coverage import SpatialCoverage
from agrimetrics_python_sdk.type.exchange import Exchange
from agrimetrics_python_sdk.type.relationship import Relationship
from agrimetrics_python_sdk.type.data_sets import DataSets
from agrimetrics_python_sdk.type.category_value import CategoryValue

from ...api_client import Dictionary
from agrimetrics_python_sdk.pydantic.spatial_coverage import SpatialCoverage as SpatialCoveragePydantic
from agrimetrics_python_sdk.pydantic.published_status import PublishedStatus as PublishedStatusPydantic
from agrimetrics_python_sdk.pydantic.relationship import Relationship as RelationshipPydantic
from agrimetrics_python_sdk.pydantic.draft_status import DraftStatus as DraftStatusPydantic
from agrimetrics_python_sdk.pydantic.data_sets import DataSets as DataSetsPydantic
from agrimetrics_python_sdk.pydantic.category_value import CategoryValue as CategoryValuePydantic
from agrimetrics_python_sdk.pydantic.exchange import Exchange as ExchangePydantic

# Query params


class IdsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class CreatorSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CreatorSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class KeywordsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'KeywordsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class TagsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TagsSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
TagRelationshipSchema = RelationshipSchema


class CategorySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['CategoryValue']:
            return CategoryValue

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['CategoryValue'], typing.List['CategoryValue']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CategorySchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'CategoryValue':
        return super().__getitem__(i)


class SpatialCoverageSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['SpatialCoverage']:
            return SpatialCoverage

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['SpatialCoverage'], typing.List['SpatialCoverage']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SpatialCoverageSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'SpatialCoverage':
        return super().__getitem__(i)
TextSchema = schemas.StrSchema
ExtendedTextSchema = schemas.StrSchema


class IdentitiesSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IdentitiesSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
OnlyFeaturedSchema = schemas.BoolSchema
ShowEditableSchema = schemas.BoolSchema
ShowHiddenSchema = schemas.BoolSchema


class PageNumSchema(
    schemas.IntSchema
):
    pass


class PageSizeSchema(
    schemas.IntSchema
):
    pass


class OffsetSchema(
    schemas.IntSchema
):
    pass


class SearchTypeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def TITLE(cls):
        return cls("title")
    
    @schemas.classproperty
    def ALL(cls):
        return cls("all")


class LimitSchema(
    schemas.IntSchema
):
    pass
LegacyConceptsSchema = schemas.BoolSchema


class SortSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def TITLE(cls):
        return cls("title")
    
    @schemas.classproperty
    def TITLEDESCENDING(cls):
        return cls("title-descending")
    
    @schemas.classproperty
    def RELEVANCE(cls):
        return cls("relevance")
ExchangeSchema = ExchangeSchema


class MetadataStandardNameSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MetadataStandardNameSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class DraftStatusSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['DraftStatus']:
            return DraftStatus

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple['DraftStatus'], typing.List['DraftStatus']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DraftStatusSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'DraftStatus':
        return super().__getitem__(i)


class PublishedStatusSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                
                class one_of_1(
                    schemas.EnumBase,
                    schemas.StrSchema
                ):
                    
                    @schemas.classproperty
                    def UNPUBLISHED(cls):
                        return cls("unpublished")
                
                @classmethod
                @functools.lru_cache()
                def one_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        PublishedStatusSchema,
                        cls.one_of_1,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PublishedStatusSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class LicenceSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'LicenceSchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'ids': typing.Union[IdsSchema, list, tuple, ],
        'creator': typing.Union[CreatorSchema, list, tuple, ],
        'keywords': typing.Union[KeywordsSchema, list, tuple, ],
        'tags': typing.Union[TagsSchema, list, tuple, ],
        'tagRelationship': typing.Union[TagRelationshipSchema, ],
        'category': typing.Union[CategorySchema, list, tuple, ],
        'spatialCoverage': typing.Union[SpatialCoverageSchema, list, tuple, ],
        'text': typing.Union[TextSchema, str, ],
        'extendedText': typing.Union[ExtendedTextSchema, str, ],
        'identities': typing.Union[IdentitiesSchema, list, tuple, ],
        'onlyFeatured': typing.Union[OnlyFeaturedSchema, bool, ],
        'showEditable': typing.Union[ShowEditableSchema, bool, ],
        'showHidden': typing.Union[ShowHiddenSchema, bool, ],
        'pageNum': typing.Union[PageNumSchema, decimal.Decimal, int, ],
        'pageSize': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'offset': typing.Union[OffsetSchema, decimal.Decimal, int, ],
        'searchType': typing.Union[SearchTypeSchema, str, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'legacyConcepts': typing.Union[LegacyConceptsSchema, bool, ],
        'sort': typing.Union[SortSchema, str, ],
        'exchange': typing.Union[ExchangeSchema, ],
        'metadataStandardName': typing.Union[MetadataStandardNameSchema, list, tuple, ],
        'draftStatus': typing.Union[DraftStatusSchema, list, tuple, ],
        'publishedStatus': typing.Union[PublishedStatusSchema, list, tuple, ],
        'licence': typing.Union[LicenceSchema, list, tuple, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_ids = api_client.QueryParameter(
    name="ids",
    style=api_client.ParameterStyle.FORM,
    schema=IdsSchema,
    explode=True,
)
request_query_creator = api_client.QueryParameter(
    name="creator",
    style=api_client.ParameterStyle.FORM,
    schema=CreatorSchema,
    explode=True,
)
request_query_keywords = api_client.QueryParameter(
    name="keywords",
    style=api_client.ParameterStyle.FORM,
    schema=KeywordsSchema,
    explode=True,
)
request_query_tags = api_client.QueryParameter(
    name="tags",
    style=api_client.ParameterStyle.FORM,
    schema=TagsSchema,
    explode=True,
)
request_query_tag_relationship = api_client.QueryParameter(
    name="tagRelationship",
    style=api_client.ParameterStyle.FORM,
    schema=RelationshipSchema,
    explode=True,
)
request_query_category = api_client.QueryParameter(
    name="category",
    style=api_client.ParameterStyle.FORM,
    schema=CategorySchema,
    explode=True,
)
request_query_spatial_coverage = api_client.QueryParameter(
    name="spatialCoverage",
    style=api_client.ParameterStyle.FORM,
    schema=SpatialCoverageSchema,
    explode=True,
)
request_query_text = api_client.QueryParameter(
    name="text",
    style=api_client.ParameterStyle.FORM,
    schema=TextSchema,
    explode=True,
)
request_query_extended_text = api_client.QueryParameter(
    name="extendedText",
    style=api_client.ParameterStyle.FORM,
    schema=ExtendedTextSchema,
    explode=True,
)
request_query_identities = api_client.QueryParameter(
    name="identities",
    style=api_client.ParameterStyle.FORM,
    schema=IdentitiesSchema,
    explode=True,
)
request_query_only_featured = api_client.QueryParameter(
    name="onlyFeatured",
    style=api_client.ParameterStyle.FORM,
    schema=OnlyFeaturedSchema,
    explode=True,
)
request_query_show_editable = api_client.QueryParameter(
    name="showEditable",
    style=api_client.ParameterStyle.FORM,
    schema=ShowEditableSchema,
    explode=True,
)
request_query_show_hidden = api_client.QueryParameter(
    name="showHidden",
    style=api_client.ParameterStyle.FORM,
    schema=ShowHiddenSchema,
    explode=True,
)
request_query_page_num = api_client.QueryParameter(
    name="pageNum",
    style=api_client.ParameterStyle.FORM,
    schema=PageNumSchema,
    explode=True,
)
request_query_page_size = api_client.QueryParameter(
    name="pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_offset = api_client.QueryParameter(
    name="offset",
    style=api_client.ParameterStyle.FORM,
    schema=OffsetSchema,
    explode=True,
)
request_query_search_type = api_client.QueryParameter(
    name="searchType",
    style=api_client.ParameterStyle.FORM,
    schema=SearchTypeSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_legacy_concepts = api_client.QueryParameter(
    name="legacyConcepts",
    style=api_client.ParameterStyle.FORM,
    schema=LegacyConceptsSchema,
    explode=True,
)
request_query_sort = api_client.QueryParameter(
    name="sort",
    style=api_client.ParameterStyle.FORM,
    schema=SortSchema,
    explode=True,
)
request_query_exchange = api_client.QueryParameter(
    name="exchange",
    style=api_client.ParameterStyle.FORM,
    schema=ExchangeSchema,
    explode=True,
)
request_query_metadata_standard_name = api_client.QueryParameter(
    name="metadataStandardName",
    style=api_client.ParameterStyle.FORM,
    schema=MetadataStandardNameSchema,
    explode=True,
)
request_query_draft_status = api_client.QueryParameter(
    name="draftStatus",
    style=api_client.ParameterStyle.FORM,
    schema=DraftStatusSchema,
    explode=True,
)
request_query_published_status = api_client.QueryParameter(
    name="publishedStatus",
    style=api_client.ParameterStyle.FORM,
    schema=PublishedStatusSchema,
    explode=True,
)
request_query_licence = api_client.QueryParameter(
    name="licence",
    style=api_client.ParameterStyle.FORM,
    schema=LicenceSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = DataSetsSchema
SchemaFor200ResponseBodyApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = schemas.BinarySchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: DataSets


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: DataSets


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet),
    },
)
_all_accept_content_types = (
    'application/json',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
)


class BaseApi(api_client.Api):

    def _list_all_data_sets_mapped_args(
        self,
        ids: typing.Optional[typing.List[str]] = None,
        creator: typing.Optional[typing.List[str]] = None,
        keywords: typing.Optional[typing.List[str]] = None,
        tags: typing.Optional[typing.List[str]] = None,
        tag_relationship: typing.Optional[Relationship] = None,
        category: typing.Optional[typing.List[CategoryValue]] = None,
        spatial_coverage: typing.Optional[typing.List[SpatialCoverage]] = None,
        text: typing.Optional[str] = None,
        extended_text: typing.Optional[str] = None,
        identities: typing.Optional[typing.List[str]] = None,
        only_featured: typing.Optional[bool] = None,
        show_editable: typing.Optional[bool] = None,
        show_hidden: typing.Optional[bool] = None,
        page_num: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        search_type: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        legacy_concepts: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        metadata_standard_name: typing.Optional[typing.List[str]] = None,
        draft_status: typing.Optional[typing.List[DraftStatus]] = None,
        published_status: typing.Optional[typing.List[typing.Union[typing.List[PublishedStatus], typing.List[str]]]] = None,
        licence: typing.Optional[typing.List[str]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if ids is not None:
            _query_params["ids"] = ids
        if creator is not None:
            _query_params["creator"] = creator
        if keywords is not None:
            _query_params["keywords"] = keywords
        if tags is not None:
            _query_params["tags"] = tags
        if tag_relationship is not None:
            _query_params["tagRelationship"] = tag_relationship
        if category is not None:
            _query_params["category"] = category
        if spatial_coverage is not None:
            _query_params["spatialCoverage"] = spatial_coverage
        if text is not None:
            _query_params["text"] = text
        if extended_text is not None:
            _query_params["extendedText"] = extended_text
        if identities is not None:
            _query_params["identities"] = identities
        if only_featured is not None:
            _query_params["onlyFeatured"] = only_featured
        if show_editable is not None:
            _query_params["showEditable"] = show_editable
        if show_hidden is not None:
            _query_params["showHidden"] = show_hidden
        if page_num is not None:
            _query_params["pageNum"] = page_num
        if page_size is not None:
            _query_params["pageSize"] = page_size
        if offset is not None:
            _query_params["offset"] = offset
        if search_type is not None:
            _query_params["searchType"] = search_type
        if limit is not None:
            _query_params["limit"] = limit
        if legacy_concepts is not None:
            _query_params["legacyConcepts"] = legacy_concepts
        if sort is not None:
            _query_params["sort"] = sort
        if exchange is not None:
            _query_params["exchange"] = exchange
        if metadata_standard_name is not None:
            _query_params["metadataStandardName"] = metadata_standard_name
        if draft_status is not None:
            _query_params["draftStatus"] = draft_status
        if published_status is not None:
            _query_params["publishedStatus"] = published_status
        if licence is not None:
            _query_params["licence"] = licence
        args.query = _query_params
        return args

    async def _alist_all_data_sets_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        List all data sets.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_ids,
            request_query_creator,
            request_query_keywords,
            request_query_tags,
            request_query_tag_relationship,
            request_query_category,
            request_query_spatial_coverage,
            request_query_text,
            request_query_extended_text,
            request_query_identities,
            request_query_only_featured,
            request_query_show_editable,
            request_query_show_hidden,
            request_query_page_num,
            request_query_page_size,
            request_query_offset,
            request_query_search_type,
            request_query_limit,
            request_query_legacy_concepts,
            request_query_sort,
            request_query_exchange,
            request_query_metadata_standard_name,
            request_query_draft_status,
            request_query_published_status,
            request_query_licence,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/data-sets',
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _list_all_data_sets_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        List all data sets.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_ids,
            request_query_creator,
            request_query_keywords,
            request_query_tags,
            request_query_tag_relationship,
            request_query_category,
            request_query_spatial_coverage,
            request_query_text,
            request_query_extended_text,
            request_query_identities,
            request_query_only_featured,
            request_query_show_editable,
            request_query_show_hidden,
            request_query_page_num,
            request_query_page_size,
            request_query_offset,
            request_query_search_type,
            request_query_limit,
            request_query_legacy_concepts,
            request_query_sort,
            request_query_exchange,
            request_query_metadata_standard_name,
            request_query_draft_status,
            request_query_published_status,
            request_query_licence,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/data-sets',
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ListAllDataSetsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alist_all_data_sets(
        self,
        ids: typing.Optional[typing.List[str]] = None,
        creator: typing.Optional[typing.List[str]] = None,
        keywords: typing.Optional[typing.List[str]] = None,
        tags: typing.Optional[typing.List[str]] = None,
        tag_relationship: typing.Optional[Relationship] = None,
        category: typing.Optional[typing.List[CategoryValue]] = None,
        spatial_coverage: typing.Optional[typing.List[SpatialCoverage]] = None,
        text: typing.Optional[str] = None,
        extended_text: typing.Optional[str] = None,
        identities: typing.Optional[typing.List[str]] = None,
        only_featured: typing.Optional[bool] = None,
        show_editable: typing.Optional[bool] = None,
        show_hidden: typing.Optional[bool] = None,
        page_num: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        search_type: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        legacy_concepts: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        metadata_standard_name: typing.Optional[typing.List[str]] = None,
        draft_status: typing.Optional[typing.List[DraftStatus]] = None,
        published_status: typing.Optional[typing.List[typing.Union[typing.List[PublishedStatus], typing.List[str]]]] = None,
        licence: typing.Optional[typing.List[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_all_data_sets_mapped_args(
            ids=ids,
            creator=creator,
            keywords=keywords,
            tags=tags,
            tag_relationship=tag_relationship,
            category=category,
            spatial_coverage=spatial_coverage,
            text=text,
            extended_text=extended_text,
            identities=identities,
            only_featured=only_featured,
            show_editable=show_editable,
            show_hidden=show_hidden,
            page_num=page_num,
            page_size=page_size,
            offset=offset,
            search_type=search_type,
            limit=limit,
            legacy_concepts=legacy_concepts,
            sort=sort,
            exchange=exchange,
            metadata_standard_name=metadata_standard_name,
            draft_status=draft_status,
            published_status=published_status,
            licence=licence,
        )
        return await self._alist_all_data_sets_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def list_all_data_sets(
        self,
        ids: typing.Optional[typing.List[str]] = None,
        creator: typing.Optional[typing.List[str]] = None,
        keywords: typing.Optional[typing.List[str]] = None,
        tags: typing.Optional[typing.List[str]] = None,
        tag_relationship: typing.Optional[Relationship] = None,
        category: typing.Optional[typing.List[CategoryValue]] = None,
        spatial_coverage: typing.Optional[typing.List[SpatialCoverage]] = None,
        text: typing.Optional[str] = None,
        extended_text: typing.Optional[str] = None,
        identities: typing.Optional[typing.List[str]] = None,
        only_featured: typing.Optional[bool] = None,
        show_editable: typing.Optional[bool] = None,
        show_hidden: typing.Optional[bool] = None,
        page_num: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        search_type: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        legacy_concepts: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        metadata_standard_name: typing.Optional[typing.List[str]] = None,
        draft_status: typing.Optional[typing.List[DraftStatus]] = None,
        published_status: typing.Optional[typing.List[typing.Union[typing.List[PublishedStatus], typing.List[str]]]] = None,
        licence: typing.Optional[typing.List[str]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_all_data_sets_mapped_args(
            ids=ids,
            creator=creator,
            keywords=keywords,
            tags=tags,
            tag_relationship=tag_relationship,
            category=category,
            spatial_coverage=spatial_coverage,
            text=text,
            extended_text=extended_text,
            identities=identities,
            only_featured=only_featured,
            show_editable=show_editable,
            show_hidden=show_hidden,
            page_num=page_num,
            page_size=page_size,
            offset=offset,
            search_type=search_type,
            limit=limit,
            legacy_concepts=legacy_concepts,
            sort=sort,
            exchange=exchange,
            metadata_standard_name=metadata_standard_name,
            draft_status=draft_status,
            published_status=published_status,
            licence=licence,
        )
        return self._list_all_data_sets_oapg(
            query_params=args.query,
        )

class ListAllDataSets(BaseApi):

    async def alist_all_data_sets(
        self,
        ids: typing.Optional[typing.List[str]] = None,
        creator: typing.Optional[typing.List[str]] = None,
        keywords: typing.Optional[typing.List[str]] = None,
        tags: typing.Optional[typing.List[str]] = None,
        tag_relationship: typing.Optional[Relationship] = None,
        category: typing.Optional[typing.List[CategoryValue]] = None,
        spatial_coverage: typing.Optional[typing.List[SpatialCoverage]] = None,
        text: typing.Optional[str] = None,
        extended_text: typing.Optional[str] = None,
        identities: typing.Optional[typing.List[str]] = None,
        only_featured: typing.Optional[bool] = None,
        show_editable: typing.Optional[bool] = None,
        show_hidden: typing.Optional[bool] = None,
        page_num: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        search_type: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        legacy_concepts: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        metadata_standard_name: typing.Optional[typing.List[str]] = None,
        draft_status: typing.Optional[typing.List[DraftStatus]] = None,
        published_status: typing.Optional[typing.List[typing.Union[typing.List[PublishedStatus], typing.List[str]]]] = None,
        licence: typing.Optional[typing.List[str]] = None,
        validate: bool = False,
        **kwargs,
    ) -> DataSetsPydantic:
        raw_response = await self.raw.alist_all_data_sets(
            ids=ids,
            creator=creator,
            keywords=keywords,
            tags=tags,
            tag_relationship=tag_relationship,
            category=category,
            spatial_coverage=spatial_coverage,
            text=text,
            extended_text=extended_text,
            identities=identities,
            only_featured=only_featured,
            show_editable=show_editable,
            show_hidden=show_hidden,
            page_num=page_num,
            page_size=page_size,
            offset=offset,
            search_type=search_type,
            limit=limit,
            legacy_concepts=legacy_concepts,
            sort=sort,
            exchange=exchange,
            metadata_standard_name=metadata_standard_name,
            draft_status=draft_status,
            published_status=published_status,
            licence=licence,
            **kwargs,
        )
        if validate:
            return DataSetsPydantic(**raw_response.body)
        return api_client.construct_model_instance(DataSetsPydantic, raw_response.body)
    
    
    def list_all_data_sets(
        self,
        ids: typing.Optional[typing.List[str]] = None,
        creator: typing.Optional[typing.List[str]] = None,
        keywords: typing.Optional[typing.List[str]] = None,
        tags: typing.Optional[typing.List[str]] = None,
        tag_relationship: typing.Optional[Relationship] = None,
        category: typing.Optional[typing.List[CategoryValue]] = None,
        spatial_coverage: typing.Optional[typing.List[SpatialCoverage]] = None,
        text: typing.Optional[str] = None,
        extended_text: typing.Optional[str] = None,
        identities: typing.Optional[typing.List[str]] = None,
        only_featured: typing.Optional[bool] = None,
        show_editable: typing.Optional[bool] = None,
        show_hidden: typing.Optional[bool] = None,
        page_num: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        search_type: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        legacy_concepts: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        metadata_standard_name: typing.Optional[typing.List[str]] = None,
        draft_status: typing.Optional[typing.List[DraftStatus]] = None,
        published_status: typing.Optional[typing.List[typing.Union[typing.List[PublishedStatus], typing.List[str]]]] = None,
        licence: typing.Optional[typing.List[str]] = None,
        validate: bool = False,
    ) -> DataSetsPydantic:
        raw_response = self.raw.list_all_data_sets(
            ids=ids,
            creator=creator,
            keywords=keywords,
            tags=tags,
            tag_relationship=tag_relationship,
            category=category,
            spatial_coverage=spatial_coverage,
            text=text,
            extended_text=extended_text,
            identities=identities,
            only_featured=only_featured,
            show_editable=show_editable,
            show_hidden=show_hidden,
            page_num=page_num,
            page_size=page_size,
            offset=offset,
            search_type=search_type,
            limit=limit,
            legacy_concepts=legacy_concepts,
            sort=sort,
            exchange=exchange,
            metadata_standard_name=metadata_standard_name,
            draft_status=draft_status,
            published_status=published_status,
            licence=licence,
        )
        if validate:
            return DataSetsPydantic(**raw_response.body)
        return api_client.construct_model_instance(DataSetsPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        ids: typing.Optional[typing.List[str]] = None,
        creator: typing.Optional[typing.List[str]] = None,
        keywords: typing.Optional[typing.List[str]] = None,
        tags: typing.Optional[typing.List[str]] = None,
        tag_relationship: typing.Optional[Relationship] = None,
        category: typing.Optional[typing.List[CategoryValue]] = None,
        spatial_coverage: typing.Optional[typing.List[SpatialCoverage]] = None,
        text: typing.Optional[str] = None,
        extended_text: typing.Optional[str] = None,
        identities: typing.Optional[typing.List[str]] = None,
        only_featured: typing.Optional[bool] = None,
        show_editable: typing.Optional[bool] = None,
        show_hidden: typing.Optional[bool] = None,
        page_num: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        search_type: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        legacy_concepts: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        metadata_standard_name: typing.Optional[typing.List[str]] = None,
        draft_status: typing.Optional[typing.List[DraftStatus]] = None,
        published_status: typing.Optional[typing.List[typing.Union[typing.List[PublishedStatus], typing.List[str]]]] = None,
        licence: typing.Optional[typing.List[str]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._list_all_data_sets_mapped_args(
            ids=ids,
            creator=creator,
            keywords=keywords,
            tags=tags,
            tag_relationship=tag_relationship,
            category=category,
            spatial_coverage=spatial_coverage,
            text=text,
            extended_text=extended_text,
            identities=identities,
            only_featured=only_featured,
            show_editable=show_editable,
            show_hidden=show_hidden,
            page_num=page_num,
            page_size=page_size,
            offset=offset,
            search_type=search_type,
            limit=limit,
            legacy_concepts=legacy_concepts,
            sort=sort,
            exchange=exchange,
            metadata_standard_name=metadata_standard_name,
            draft_status=draft_status,
            published_status=published_status,
            licence=licence,
        )
        return await self._alist_all_data_sets_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        ids: typing.Optional[typing.List[str]] = None,
        creator: typing.Optional[typing.List[str]] = None,
        keywords: typing.Optional[typing.List[str]] = None,
        tags: typing.Optional[typing.List[str]] = None,
        tag_relationship: typing.Optional[Relationship] = None,
        category: typing.Optional[typing.List[CategoryValue]] = None,
        spatial_coverage: typing.Optional[typing.List[SpatialCoverage]] = None,
        text: typing.Optional[str] = None,
        extended_text: typing.Optional[str] = None,
        identities: typing.Optional[typing.List[str]] = None,
        only_featured: typing.Optional[bool] = None,
        show_editable: typing.Optional[bool] = None,
        show_hidden: typing.Optional[bool] = None,
        page_num: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        search_type: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        legacy_concepts: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        exchange: typing.Optional[Exchange] = None,
        metadata_standard_name: typing.Optional[typing.List[str]] = None,
        draft_status: typing.Optional[typing.List[DraftStatus]] = None,
        published_status: typing.Optional[typing.List[typing.Union[typing.List[PublishedStatus], typing.List[str]]]] = None,
        licence: typing.Optional[typing.List[str]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._list_all_data_sets_mapped_args(
            ids=ids,
            creator=creator,
            keywords=keywords,
            tags=tags,
            tag_relationship=tag_relationship,
            category=category,
            spatial_coverage=spatial_coverage,
            text=text,
            extended_text=extended_text,
            identities=identities,
            only_featured=only_featured,
            show_editable=show_editable,
            show_hidden=show_hidden,
            page_num=page_num,
            page_size=page_size,
            offset=offset,
            search_type=search_type,
            limit=limit,
            legacy_concepts=legacy_concepts,
            sort=sort,
            exchange=exchange,
            metadata_standard_name=metadata_standard_name,
            draft_status=draft_status,
            published_status=published_status,
            licence=licence,
        )
        return self._list_all_data_sets_oapg(
            query_params=args.query,
        )

