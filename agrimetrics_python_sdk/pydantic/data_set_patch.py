# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from agrimetrics_python_sdk.pydantic.category_value import CategoryValue
from agrimetrics_python_sdk.pydantic.contact import Contact
from agrimetrics_python_sdk.pydantic.data_format import DataFormat
from agrimetrics_python_sdk.pydantic.data_set_patch_alternative_titles import DataSetPatchAlternativeTitles
from agrimetrics_python_sdk.pydantic.data_set_patch_derived_from import DataSetPatchDerivedFrom
from agrimetrics_python_sdk.pydantic.data_set_patch_distributions import DataSetPatchDistributions
from agrimetrics_python_sdk.pydantic.data_set_patch_geospatial_extent import DataSetPatchGeospatialExtent
from agrimetrics_python_sdk.pydantic.data_set_patch_licence import DataSetPatchLicence
from agrimetrics_python_sdk.pydantic.data_set_patch_metadata_contact import DataSetPatchMetadataContact
from agrimetrics_python_sdk.pydantic.data_set_patch_tags import DataSetPatchTags
from agrimetrics_python_sdk.pydantic.data_set_patch_temporal_extent import DataSetPatchTemporalExtent
from agrimetrics_python_sdk.pydantic.published_status import PublishedStatus
from agrimetrics_python_sdk.pydantic.resource import Resource
from agrimetrics_python_sdk.pydantic.taxonomy_keywords import TaxonomyKeywords
from agrimetrics_python_sdk.pydantic.topic import Topic
from agrimetrics_python_sdk.pydantic.workflow_keywords import WorkflowKeywords

class DataSetPatch(BaseModel):
    tags: typing.Optional[DataSetPatchTags] = Field(None, alias='tags')

    # Summary of the data set.
    summary: typing.Optional[str] = Field(None, alias='summary')

    # Title for the data set.
    title: typing.Optional[str] = Field(None, alias='title')

    # Description of the data set.
    description: typing.Optional[str] = Field(None, alias='description')

    alternative_titles: typing.Optional[DataSetPatchAlternativeTitles] = Field(None, alias='alternativeTitles')

    # ScoringURI for the model.
    scoring_u_r_i: typing.Optional[str] = Field(None, alias='scoringURI')

    # Endpoint key for the model.
    endpoint_key: typing.Optional[str] = Field(None, alias='endpointKey')

    derived_from: typing.Optional[DataSetPatchDerivedFrom] = Field(None, alias='derivedFrom')

    # Creator of the data set.
    creator: typing.Optional[typing.Optional[str]] = Field(None, alias='creator')

    # Free text description about the reliability of this dataset.
    data_reliability: typing.Optional[typing.Optional[str]] = Field(None, alias='dataReliability')

    # WARNING: This property is deprecated
    # License of the data set.
    license: typing.Optional[typing.Optional[str]] = Field(None, alias='license')

    licence: typing.Optional[DataSetPatchLicence] = Field(None, alias='licence')

    # Links containing more information on the data set
    resources: typing.Optional[typing.Optional[typing.List[Resource]]] = Field(None, alias='resources')

    # Format of the data set
    data_formats: typing.Optional[typing.Optional[typing.List[DataFormat]]] = Field(None, alias='dataFormats')

    # The geo spatial coverage of the data set.
    spatial_coverage: typing.Optional[Literal["United Kingdom", "England", "Northern Ireland", "Scotland", "Wales", "Canada", "Ethiopia", "France", "India", "Kenya", "Mexico", "Netherlands", "Spain", "Tanzania", "Uganda", "United States", "Global only", None]] = Field(None, alias='spatialCoverage')

    # The resolution of data set in meters.
    spatial_resolution: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='spatialResolution')

    geospatial_extent: typing.Optional[DataSetPatchGeospatialExtent] = Field(None, alias='geospatialExtent')

    # The time frame this data set covers.
    temporal_coverage: typing.Optional[typing.Optional[str]] = Field(None, alias='temporalCoverage')

    temporal_extent: typing.Optional[DataSetPatchTemporalExtent] = Field(None, alias='temporalExtent')

    # The sampling time period of the data set.
    temporal_resolution: typing.Optional[Literal["P1Y", "P1M", "P1D", "PT1H", "PT1M", "PT1S", None]] = Field(None, alias='temporalResolution')

    topics: typing.Optional[typing.List[Topic]] = Field(None, alias='topics')

    # List of workflow keywords on this data set
    workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = Field(None, alias='workflowKeywords')

    # List of keywords based on specific taxonomies
    taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = Field(None, alias='taxonomyKeywords')

    # The frequency at which data set is published.
    accrual_periodicity: typing.Optional[Literal["Hourly", "Daily", "Three times a week", "Semiweekly", "Weekly", "Three times a month", "Biweekly", "Semimonthly", "Monthly", "Bimonthly", "Quarterly", "Three times a year", "Semiannual", "Annual", "Biennial", "Triennial", "Continuous", "Irregular", "continual", "daily", "weekly", "fortnightly", "monthly", "quarterly", "biannually", "annually", "asNeeded", "irregular", "notPlanned", "unknown", None]] = Field(None, alias='accrualPeriodicity')

    # The date when the data set was issued.
    issued: typing.Optional[typing.Optional[str]] = Field(None, alias='issued')

    # Data set creation timestamp.
    created_at: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='createdAt')

    # Data set publication timestamp.
    published: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='published')

    published_status: typing.Optional[PublishedStatus] = Field(None, alias='publishedStatus')

    # An timestamp of when the data in this dataset was last updated
    modified: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='modified')

    category: typing.Optional[CategoryValue] = Field(None, alias='category')

    # Whether or not this data set should be displayed in the index.
    visibility: typing.Optional[Literal["visible", "hidden"]] = Field(None, alias='visibility')

    # Pricing description of the data set.
    pricing_description: typing.Optional[str] = Field(None, alias='pricingDescription')

    distributions: typing.Optional[DataSetPatchDistributions] = Field(None, alias='distributions')

    # Approval for access status number
    approval_for_access_number: typing.Optional[typing.Optional[typing.Union[int, float]]] = Field(None, alias='approvalForAccessNumber')

    # Approval for access status value
    approval_for_access_status: typing.Optional[Literal["AfA (Information Requests only)", "AfA (Public Register)", "AfA (Publication Scheme and Information for Re-Use Register)", "AfA (Publication Scheme)", "Not AfA (To be Assessessed with Guidance)", "Not AfA (To be Assessed)", "Not Applicable - Third Party Dataset", "Open Data Risk Assessment", None]] = Field(None, alias='approvalForAccessStatus')

    # List of contacts for this data set
    contacts: typing.Optional[typing.List[Contact]] = Field(None, alias='contacts')

    metadata_contact: typing.Optional[DataSetPatchMetadataContact] = Field(None, alias='metadataContact')

    # Information about the creation and quality assurance process of the dataset
    lineage: typing.Optional[typing.Optional[str]] = Field(None, alias='lineage')

    # Language used on the data set
    language: typing.Optional[typing.Optional[str]] = Field(None, alias='language')

    # Character set used on the data set
    character_set: typing.Optional[typing.Optional[str]] = Field(None, alias='characterSet')

    # Hierarchy level of the data set
    hierarchy_level: typing.Optional[typing.Optional[str]] = Field(None, alias='hierarchyLevel')

    # Language used on the metadata
    metadata_language: typing.Optional[typing.Optional[str]] = Field(None, alias='metadataLanguage')

    # Character set used on the metadata
    metadata_character_set: typing.Optional[typing.Optional[str]] = Field(None, alias='metadataCharacterSet')

    metadata_standard_name: typing.Optional[typing.Optional[str]] = Field(None, alias='metadataStandardName')

    metadata_standard_version: typing.Optional[typing.Optional[str]] = Field(None, alias='metadataStandardVersion')

    # URL to the specification of the coordinate system used in the data
    coordinate_reference_system_id: typing.Optional[typing.Optional[str]] = Field(None, alias='coordinateReferenceSystemId')

    # Type of the geospatial data
    spatial_representation_type: typing.Optional[typing.Optional[str]] = Field(None, alias='spatialRepresentationType')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
