# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict


class DataRequestDetailsItem(BaseModel):
    # The ID of the data request
    request_id: str = Field(alias='requestId')

    # The ID of the dataset that the data request relates to
    dataset_id: str = Field(alias='datasetId')

    # The name of the dataset that the data request relates to
    dataset_name: str = Field(alias='datasetName')

    # The status of the data request
    status: Literal["pending", "approved", "denied", "cancelled"] = Field(alias='status')

    # The date the data request was made
    requested_date: str = Field(alias='requestedDate')

    # The date the data request was approved or rejected
    reviewed_date: typing.Optional[typing.Union[bool, date, datetime, dict, float, int, list, str, None]] = Field(None, alias='reviewedDate')

    # The format the user would like the data to be provided in
    requested_format: typing.Optional[Literal["application/geo+json", "application/gml+xml; version=3.2", "application/vnd.google-earth.kml+xml", "application/zipped-shapefile", "application/x.gdb+zip", "application/x.mid-mif+zip", "application/x.tab+zip", "application/dxf", "image/tiff"]] = Field(None, alias='requestedFormat')

    # The name of the project the data is for
    project_name: typing.Optional[str] = Field(None, alias='projectName')

    # The name of the project manager who can approve the request
    project_manager_name: typing.Optional[str] = Field(None, alias='projectManagerName')

    # The email address of the project manager who can approve the request
    project_manager_email: typing.Optional[str] = Field(None, alias='projectManagerEmail')

    # The email of the person who made the data request
    requester_email: typing.Optional[str] = Field(None, alias='requesterEmail')

    # The date until which the data from an approved request can be downloaded
    expiry_date: typing.Optional[str] = Field(None, alias='expiryDate')

    unique_link_id: typing.Optional[str] = Field(None, alias='uniqueLinkId')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
