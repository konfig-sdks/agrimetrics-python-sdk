# coding: utf-8

"""
    Catalog API

    This API lists data sets available on Agrimetrics platform.

    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from agrimetrics_python_sdk.pydantic.accrual_periodicity import AccrualPeriodicity
from agrimetrics_python_sdk.pydantic.basic_data_set_info import BasicDataSetInfo
from agrimetrics_python_sdk.pydantic.category_value import CategoryValue
from agrimetrics_python_sdk.pydantic.contact import Contact
from agrimetrics_python_sdk.pydantic.data_format import DataFormat
from agrimetrics_python_sdk.pydantic.data_set_alternative_titles import DataSetAlternativeTitles
from agrimetrics_python_sdk.pydantic.data_set_concepts import DataSetConcepts
from agrimetrics_python_sdk.pydantic.data_set_data_set import DataSetDataSet
from agrimetrics_python_sdk.pydantic.data_set_derived_from import DataSetDerivedFrom
from agrimetrics_python_sdk.pydantic.data_set_distributions import DataSetDistributions
from agrimetrics_python_sdk.pydantic.data_set_entitlements_by_identity import DataSetEntitlementsByIdentity
from agrimetrics_python_sdk.pydantic.data_set_keywords import DataSetKeywords
from agrimetrics_python_sdk.pydantic.data_set_sample_data import DataSetSampleData
from agrimetrics_python_sdk.pydantic.data_set_services import DataSetServices
from agrimetrics_python_sdk.pydantic.data_set_tags import DataSetTags
from agrimetrics_python_sdk.pydantic.draft_status import DraftStatus
from agrimetrics_python_sdk.pydantic.entitlement import Entitlement
from agrimetrics_python_sdk.pydantic.entry_type import EntryType
from agrimetrics_python_sdk.pydantic.exchange import Exchange
from agrimetrics_python_sdk.pydantic.geospatial_extent import GeospatialExtent
from agrimetrics_python_sdk.pydantic.image_representation import ImageRepresentation
from agrimetrics_python_sdk.pydantic.licence import Licence
from agrimetrics_python_sdk.pydantic.public_contact import PublicContact
from agrimetrics_python_sdk.pydantic.published_status import PublishedStatus
from agrimetrics_python_sdk.pydantic.resource import Resource
from agrimetrics_python_sdk.pydantic.spatial_coverage import SpatialCoverage
from agrimetrics_python_sdk.pydantic.taxonomy_keywords import TaxonomyKeywords
from agrimetrics_python_sdk.pydantic.topic import Topic
from agrimetrics_python_sdk.pydantic.workflow_keywords import WorkflowKeywords

class DataSet(BaseModel):
    # Title for the data set.
    title: str = Field(alias='title')

    # Description of the data set.
    description: str = Field(alias='description')

    entry_type: EntryType = Field(alias='entryType')

    tags: typing.Optional[DataSetTags] = Field(None, alias='tags')

    # Summary of the data set.
    summary: typing.Optional[str] = Field(None, alias='summary')

    # The ID of a dataset in the catalog
    id: typing.Optional[str] = Field(None, alias='id')

    exchange: typing.Optional[Exchange] = Field(None, alias='exchange')

    alternative_titles: typing.Optional[DataSetAlternativeTitles] = Field(None, alias='alternativeTitles')

    # Scoring URI of the model.
    scoring_u_r_i: typing.Optional[str] = Field(None, alias='scoringURI')

    # Endpoint key for the model.
    endpoint_key: typing.Optional[str] = Field(None, alias='endpointKey')

    # Whether the current user is the owner of this data set.
    is_owner: typing.Optional[bool] = Field(None, alias='isOwner')

    # The ID of the publisher.
    publisher: typing.Optional[str] = Field(None, alias='publisher')

    # Data set creation timestamp.
    created_at: typing.Optional[typing.Union[int, float]] = Field(None, alias='createdAt')

    # Data set publication timestamp.
    published: typing.Optional[typing.Union[int, float]] = Field(None, alias='published')

    # Metadata last-modification timestmap.
    metadata_modified: typing.Optional[typing.Union[int, float]] = Field(None, alias='metadataModified')

    # Other data sets using this data set.
    used_by: typing.Optional[typing.List[BasicDataSetInfo]] = Field(None, alias='usedBy')

    derived_from: typing.Optional[DataSetDerivedFrom] = Field(None, alias='derivedFrom')

    # Entitlements for the current user.
    entitlements: typing.Optional[typing.List[Entitlement]] = Field(None, alias='entitlements')

    entitlements_by_identity: typing.Optional[DataSetEntitlementsByIdentity] = Field(None, alias='entitlementsByIdentity')

    # Creator of the data set.
    creator: typing.Optional[str] = Field(None, alias='creator')

    # Free text description about the reliability of this dataset.
    data_reliability: typing.Optional[str] = Field(None, alias='dataReliability')

    # WARNING: This property is deprecated
    # License of the data set.
    license: typing.Optional[str] = Field(None, alias='license')

    licence: typing.Optional[Licence] = Field(None, alias='licence')

    # WARNING: This property is deprecated
    # DEPRECATED. This has been replaced with the resources attribute. Reference URI of the data set.
    landing_page: typing.Optional[str] = Field(None, alias='landingPage')

    # Links containing more information on the data set
    resources: typing.Optional[typing.List[Resource]] = Field(None, alias='resources')

    # Format of the data set
    data_formats: typing.Optional[typing.List[DataFormat]] = Field(None, alias='dataFormats')

    # Pricing description of the data set.
    pricing_description: typing.Optional[str] = Field(None, alias='pricingDescription')

    spatial_coverage: typing.Optional[SpatialCoverage] = Field(None, alias='spatialCoverage')

    # The resolution of data set in meters.
    spatial_resolution: typing.Optional[typing.Union[int, float]] = Field(None, alias='spatialResolution')

    geospatial_extent: typing.Optional[GeospatialExtent] = Field(None, alias='geospatialExtent')

    # The time frame this data set covers.
    temporal_coverage: typing.Optional[str] = Field(None, alias='temporalCoverage')

    # The sampling time period of the data set.
    temporal_resolution: typing.Optional[Literal["P1Y", "P1M", "P1D", "PT1H", "PT1M", "PT1S"]] = Field(None, alias='temporalResolution')

    accrual_periodicity: typing.Optional[AccrualPeriodicity] = Field(None, alias='accrualPeriodicity')

    distributions: typing.Optional[DataSetDistributions] = Field(None, alias='distributions')

    # The date when the data set was issued.
    issued: typing.Optional[str] = Field(None, alias='issued')

    # An timestamp of when the data in this dataset was last updated
    modified: typing.Optional[typing.Union[int, float]] = Field(None, alias='modified')

    # WARNING: This property is deprecated
    keywords: typing.Optional[DataSetKeywords] = Field(None, alias='keywords')

    # List of topics on this data set
    topics: typing.Optional[typing.List[Topic]] = Field(None, alias='topics')

    # List of workflow keywords on this data set
    workflow_keywords: typing.Optional[typing.List[WorkflowKeywords]] = Field(None, alias='workflowKeywords')

    # List of keywords based on specific taxonomies
    taxonomy_keywords: typing.Optional[typing.List[TaxonomyKeywords]] = Field(None, alias='taxonomyKeywords')

    category: typing.Optional[CategoryValue] = Field(None, alias='category')

    # Whether or not this data set should be displayed in the index.
    visibility: typing.Optional[Literal["visible", "hidden"]] = Field(None, alias='visibility')

    concepts: typing.Optional[DataSetConcepts] = Field(None, alias='concepts')

    data_set: typing.Optional[DataSetDataSet] = Field(None, alias='dataSet')

    services: typing.Optional[DataSetServices] = Field(None, alias='services')

    sample_data: typing.Optional[DataSetSampleData] = Field(None, alias='sampleData')

    image: typing.Optional[ImageRepresentation] = Field(None, alias='image')

    # URL to the specification of the coordinate system used in the data
    coordinate_reference_system_id: typing.Optional[str] = Field(None, alias='coordinateReferenceSystemId')

    # Type of the geospatial data
    spatial_representation_type: typing.Optional[str] = Field(None, alias='spatialRepresentationType')

    # Information about the creation and quality assurance process of the dataset
    lineage: typing.Optional[str] = Field(None, alias='lineage')

    # Information about which template was used to create the dataset record
    from_template: typing.Optional[str] = Field(None, alias='fromTemplate')

    # List of contacts for this data set
    contacts: typing.Optional[typing.List[Contact]] = Field(None, alias='contacts')

    metadata_contact: typing.Optional[Contact] = Field(None, alias='metadataContact')

    public_contact: typing.Optional[PublicContact] = Field(None, alias='publicContact')

    # Approval for access status number
    approval_for_access_number: typing.Optional[typing.Union[int, float]] = Field(None, alias='approvalForAccessNumber')

    # Approval for access status value
    approval_for_access_status: typing.Optional[Literal["AfA (Information Requests only)", "AfA (Public Register)", "AfA (Publication Scheme and Information for Re-Use Register)", "AfA (Publication Scheme)", "Not AfA (To be Assessessed with Guidance)", "Not AfA (To be Assessed)", "Not Applicable - Third Party Dataset", "Open Data Risk Assessment"]] = Field(None, alias='approvalForAccessStatus')

    # Language used on the data set
    language: typing.Optional[str] = Field(None, alias='language')

    # Character set used on the data set
    character_set: typing.Optional[str] = Field(None, alias='characterSet')

    # Hierarchy level of the data set
    hierarchy_level: typing.Optional[str] = Field(None, alias='hierarchyLevel')

    # Language used on the metadata
    metadata_language: typing.Optional[str] = Field(None, alias='metadataLanguage')

    # Character set used on the metadata
    metadata_character_set: typing.Optional[str] = Field(None, alias='metadataCharacterSet')

    metadata_standard_name: typing.Optional[str] = Field(None, alias='metadataStandardName')

    metadata_standard_version: typing.Optional[str] = Field(None, alias='metadataStandardVersion')

    draft_status: typing.Optional[DraftStatus] = Field(None, alias='draftStatus')

    # Any notes added during review of the data set
    draft_notes: typing.Optional[str] = Field(None, alias='draftNotes')

    published_status: typing.Optional[PublishedStatus] = Field(None, alias='publishedStatus')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
